% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stdmod.R, R/stdmod_bootci.R, R/stdmod-package.R
\docType{package}
\name{stdmod}
\alias{stdmod}
\alias{stdmod_bootci}
\title{Compute the standardized moderation effect given the \code{lm} output}
\usage{
stdmod(
  lm_out,
  x = NULL,
  w = NULL,
  y = NULL,
  x_rescale = TRUE,
  w_rescale = TRUE,
  y_rescale = TRUE
)

stdmod_bootci(lm_out, ..., nboot = 100, boot_args = NULL, full_output = FALSE)
}
\arguments{
\item{lm_out}{The output from \code{lm}.}

\item{x}{The independent variable, that is, the variable with its effect
being moderated. If supplied, it's standard deviation will be used
for rescaling. Default is NULL.}

\item{w}{The moderator. If supplied, it's standard deviation will be used
for rescaling. Default is NULL.}

\item{y}{The dependent (outcome) variable. If supplied, it's standard
deviation will be used for rescaling. Default is NULL.}

\item{x_rescale}{If TRUE, will rescale x by its SD. Default is TRUE.}

\item{w_rescale}{If TRUE, will rescale w by its SD. Default is TRUE.}

\item{y_rescale}{If TRUE, will rescale y by its SD. Default is TRUE.}

\item{...}{Parameters to be passed to stdmod}

\item{nboot}{The number of bootstrapping samples. Default is 100}

\item{boot_args}{A named list of arguments to be passed to \code{boot}. Default
is NULL.}

\item{full_output}{Whether the full output from \code{boot} is return. Default is
FALSE.}
}
\value{
The standardized moderation effect.
}
\description{
Compute the standardized moderation effect given the \code{lm} output.
}
\details{
Compute the standardized moderation effect given the \code{lm} output.

\code{\link[=stdmod_bootci]{stdmod_bootci()}} is a wrapper of \code{\link[=stdmod]{stdmod()}}. It computes the bootstrapping
confidence interval of the standardized moderation effect given
the \code{lm} output.
}
\section{Functions}{
\itemize{
\item \code{stdmod}: The base function compute standardized moderation effect

\item \code{stdmod_bootci}: A wrapper of \code{\link[=std_mod]{std_mod()}} that compute the nonparametric
bootstrapping confidence interval of the standardized
moderation effect
}}

\examples{

# Load a test data of 500 cases
# It has one predictor (iv), one moderator (mod), two covariates (v1 and v2),
# and one dv (dv). All variables continuous.
dat <- test_x_1_w_1_v_2_n_500

# Do regression as usual:
lm_raw <- lm(dv ~ iv*mod + v1 + v2, dat)
summary(lm_raw)

# The standard deivations of iv, dv, and mod:
sds <- apply(dat, 2, sd)
sds

# Compute the standardized moderation effect:
stdmod_xyw <- stdmod(lm_raw, x = iv, y = dv, w = mod)
stdmod_xyw
# By default, all three variables will be standardized.

# Check against self-computed standardized moderation effect:
coef(lm_raw)["iv:mod"] * sds["iv"] * sds["mod"] / sds["dv"]

# Standardize only the iv, i.e., do not standardized dv and the moderator:
stdmod_x <- stdmod(lm_raw, x = iv, y = dv, w = mod, 
                   x_rescale = TRUE,  y_rescale = FALSE, w_rescale = FALSE)
stdmod_x
# Check against self-computed moderation effect with only iv standardized:
coef(lm_raw)["iv:mod"] * sds["iv"]


\donttest{

dat <- test_x_1_w_1_v_2_n_500
# Do regression as usual:
lm_raw <- lm(dv ~ iv*mod + v1 + v2, dat)
# Compute the standardized moderation effect, generates its confidence interval 
# by nonparametric bootstrappinng.
set.seed(85740917)
stdmod_xyw_boot <- stdmod_bootci(lm_raw, x = iv, w = mod, y = dv, nboot = 500)
# Print the ci
stdmod_xyw_boot$ci
# Repeat the analysis but keep the results from boot:
set.seed(85740917)
stdmod_xyw_boot <- stdmod_bootci(lm_raw, x = iv, w = mod, y = dv, 
                                 nboot = 500, full_output = TRUE)
# Print the 95\% percential confidence interval
stdmod_xyw_boot$ci
# Print the boot output, default is the point estimate:
stdmod_xyw_boot$boot_out
}Â 

}
