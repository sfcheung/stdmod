[{"path":"https://sfcheung.github.io/stdmod/articles/cond_effect.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Conditional Effects by cond_effect()","text":"vignette illustrates use cond_effect() stdmod package. package can found vignette(\"stdmod\", package = \"stdmod\") https://sfcheung.github.io/stdmod/.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/cond_effect.html","id":"what-cond_effect-can-do","dir":"Articles","previous_headings":"","what":"What cond_effect() Can Do","title":"Conditional Effects by cond_effect()","text":"can compute conditional effect predictor (focal variable) outcome variable (dependent variable) selected levels moderator: can also compute standardized conditional moderation effect predictor: Nonparametric bootstrap percentile confidence interval can also formed standardized conditional effect using cond_effect_boot(). cond_effect() designed versatile tool. designed function “good-enough” common scenarios. Nevertheless, can report useful information along conditional effects, demonstrated .","code":"#>   Level conscientiousness emotional_stability Effect  S.E.     t     p Sig #>    High             3.950                      0.012 0.117 0.107 0.915     #>  Medium             3.343                      0.214 0.083 2.560 0.011 *   #>     Low             2.736                      0.415 0.115 3.601 0.000 *** #>   Level conscientiousness emotional_stability Effect  S.E.     t     p Sig #>    High             1.000                      0.007 0.063 0.107 0.915     #>  Medium             0.000                      0.115 0.045 2.560 0.011 *   #>     Low            -1.000                      0.223 0.062 3.601 0.000 ***"},{"path":[]},{"path":"https://sfcheung.github.io/stdmod/articles/cond_effect.html","id":"regression-output-predictor-x-and-moderator-w","dir":"Articles","previous_headings":"Major Arguments","what":"Regression Output, Predictor (x), and Moderator (w)","title":"Conditional Effects by cond_effect()","text":"output: output lm(), std_selected(), std_selected_boot(), least one interaction term. Bootstrap estimates std_selected_boot() ignored bootstrapping done level . x: predictor (focal variable). w: moderator. required arguments. Just setting can generate graph: default, print method cond_effect() output prints conditional effects, OLS standard errors, t statistics, p-values, significant test results, along information value level moderator, distance mean, percentage cases equal less level. regression model also printed. table effects needed, call print() set table_only TRUE: options printing output can found help page print.cond_effect().","code":"library(stdmod) data(sleep_emo_con) lm_out <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,                               sleep_emo_con) cond_out <- cond_effect(output = lm_out,                         x = \"emotional_stability\",                         w = \"conscientiousness\") cond_out #> The effects of emotional_stability on sleep_duration, conditional on conscientiousness: #>  #>   Level conscientiousness emotional_stability Effect  S.E.     t     p Sig #>    High             3.950                      0.012 0.117 0.107 0.915     #>  Medium             3.343                      0.214 0.083 2.560 0.011 *   #>     Low             2.736                      0.415 0.115 3.601 0.000 *** #>  #>  #> The regression model: #>  #>  sleep_duration ~ age + gender + emotional_stability * conscientiousness #>  #> Interpreting the levels of conscientiousness: #>  #>   Level conscientiousness % Below From Mean (in SD) #>    High             3.950   83.60              1.00 #>  Medium             3.343   49.60              0.00 #>     Low             2.736   16.60             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below). print(cond_out, table_only = TRUE) #>   Level conscientiousness emotional_stability Effect  S.E.     t     p Sig #>    High             3.950                      0.012 0.117 0.107 0.915     #>  Medium             3.343                      0.214 0.083 2.560 0.011 *   #>     Low             2.736                      0.415 0.115 3.601 0.000 ***"},{"path":[]},{"path":"https://sfcheung.github.io/stdmod/articles/cond_effect.html","id":"numeric-moderators","dir":"Articles","previous_headings":"Levels of the Moderator","what":"Numeric Moderators","title":"Conditional Effects by cond_effect()","text":"moderator numeric variable, , default, conditional effects three levels moderators used: one standard deviation (SD) mean (“Low”), mean (“Medium”), one SD mean (“High”). Users can also use percentiles define “Low”, “Medium”, “High” setting w_method \"percentile\". default 16th percentile, 50th percentile, 84th percentile, corresponds approximately one SD mean, mean, one SD mean, respectively, normal distribution. Note empirical percentage cases equal less level may exactly equal requested percentile number cases small /number unique values moderator small.","code":"data(sleep_emo_con) lm_out <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,                               sleep_emo_con) cond_out <- cond_effect(output = lm_out,                         x = \"emotional_stability\",                         w = \"conscientiousness\",                         w_method = \"percentile\") print(cond_out, title = FALSE, model = FALSE) #>   Level conscientiousness emotional_stability Effect  S.E.      t     p Sig #>    High             4.000                     -0.004 0.122 -0.034 0.973     #>  Medium             3.400                      0.195 0.084  2.322 0.021 *   #>     Low             2.700                      0.427 0.119  3.600 0.000 *** #>  #> Interpreting the levels of conscientiousness: #>  #>   Level conscientiousness % Below From Mean (in SD) #>    High             4.000   87.20              1.08 #>  Medium             3.400   57.00              0.09 #>     Low             2.700   16.60             -1.06 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below)."},{"path":"https://sfcheung.github.io/stdmod/articles/cond_effect.html","id":"categorical-moderators","dir":"Articles","previous_headings":"Levels of the Moderator","what":"Categorical Moderators","title":"Conditional Effects by cond_effect()","text":"moderator categorical variable (string variable factor), conditional effect moderator value categorical moderator printed:","code":"set.seed(61452) sleep_emo_con$city <- sample(c(\"Alpha\", \"Beta\", \"Gamma\"),                                nrow(sleep_emo_con), replace = TRUE) lm_cat <- lm(sleep_duration ~ age + gender + emotional_stability*city,                               sleep_emo_con) cond_out <- cond_effect(lm_cat,                         x = \"emotional_stability\",                         w = \"city\") print(cond_out, title = FALSE, model = FALSE) #>  Level  city emotional_stability Effect  S.E.     t     p Sig #>  Alpha Alpha                      0.408 0.135 3.027 0.003  ** #>   Beta  Beta                      0.351 0.147 2.388 0.017  *  #>  Gamma Gamma                      0.020 0.149 0.131 0.896"},{"path":"https://sfcheung.github.io/stdmod/articles/cond_effect.html","id":"nonparametric-bootstrap-confidence-intervals","dir":"Articles","previous_headings":"","what":"Nonparametric Bootstrap Confidence Intervals","title":"Conditional Effects by cond_effect()","text":"one variables standardized, OLS confidence intervals appropriate (Cheung, Cheung, Lau, Hui, & Vong, 2022; Yuan & Chan, 2011). Users can call cond_effect_boot() use nonparametric bootstrapping form percentile confidence interval conditional effect. conf: level confidence, expressed proportion. Default .95, requesting 95% confidence interval. nboot number bootstrap samples drawn. least 2000 5000 preferable. make results reproducible, call set.seed() calling cond_effect_boot(), illustrated .","code":"lm_out <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,                               sleep_emo_con) # Standardize all variables and do the moderated regression again # Use to_standardize as a shortcut to to_center and to_scale lm_std <- std_selected(lm_out,                        to_standardize = ~ .) set.seed(897043) cond_std <- cond_effect_boot(output = lm_std,                              x = \"emotional_stability\",                              w = \"conscientiousness\",                              nboot = 2000) print(cond_std, model = FALSE, title = FALSE, level_info = FALSE) #>   Level conscientiousness emotional_stability Effect CI Lower CI Upper  S.E. #>    High             1.000                      0.007   -0.107    0.117 0.063 #>  Medium             0.000                      0.115    0.029    0.202 0.045 #>     Low            -1.000                      0.223    0.071    0.364 0.062 #>      t     p Sig #>  0.107 0.915     #>  2.560 0.011 *   #>  3.601 0.000 *** #>  #> [CI Lower, CI Upper] shows the 95% nonparametric bootstrap confidence #> interval(s) (based on 2000 bootstrap samples). #>  #> Note: #>  #> - The variable(s) sleep_duration, emotional_stability, #>   conscientiousness is/are standardized. #> - The conditional effects are the standardized effects of #>   emotional_stability on sleep_duration."},{"path":"https://sfcheung.github.io/stdmod/articles/cond_effect.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Conditional Effects by cond_effect()","text":"Please refer help page cond_effect() cond_effect_boot() options available, defining number SDs mean define “Low” “High”, percentiles used, using parallel processing speed bootstrapping.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/cond_effect.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Conditional Effects by cond_effect()","text":"Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. https://doi.org/10.1037/hea0001188. Yuan, K.-H., & Chan, W. (2011). Biases standard errors standardized regression coefficients. Psychometrika, 76(4), 670-690. https://doi.org/10.1007/s11336-011-9224-6","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/moderation.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Standardized Moderation Effect by std_selected()","text":"document demonstrates use std_selected() stdmod package compute correct standardized solution moderated regression. package can found vignette(\"stdmod\", package = \"stdmod\") https://sfcheung.github.io/stdmod/.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/moderation.html","id":"setup-the-environment","dir":"Articles","previous_headings":"","what":"Setup the Environment","title":"Standardized Moderation Effect by std_selected()","text":"","code":"library(stdmod) # For computing the standardized moderation effect conveniently"},{"path":"https://sfcheung.github.io/stdmod/articles/moderation.html","id":"load-the-dataset","dir":"Articles","previous_headings":"","what":"Load the Dataset","title":"Standardized Moderation Effect by std_selected()","text":"data set 500 cases data. variables sleep duration, age, gender, scores two personality scales, emotional stability conscientiousness IPIP Big Five markers. Please refer (citation added) detail data set. names variables shortened readability:","code":"data(sleep_emo_con) head(sleep_emo_con, 3) #>   case_id sleep_duration conscientiousness emotional_stability age gender #> 1       1              6               3.6                 3.6  20 female #> 2       2              4               3.8                 2.4  20 female #> 3       3              7               4.3                 2.7  20 female colnames(sleep_emo_con)[3:4] <- c(\"cons\", \"emot\") head(sleep_emo_con, 3) #>   case_id sleep_duration cons emot age gender #> 1       1              6  3.6  3.6  20 female #> 2       2              4  3.8  2.4  20 female #> 3       3              7  4.3  2.7  20 female"},{"path":"https://sfcheung.github.io/stdmod/articles/moderation.html","id":"moderated-regression","dir":"Articles","previous_headings":"","what":"Moderated Regression","title":"Standardized Moderation Effect by std_selected()","text":"Suppose interested predicting sleep duration emotional stability, controlling gender age. However, suspect effect emotional stability, , may moderated conscientiousness. Therefore, conduct moderated regression follow:  results show conscientiousness significantly moderates effect emotional stability sleep duration.","code":"lm_out <- lm(sleep_duration ~ age + gender + emot * cons,              data = sleep_emo_con) summary(lm_out) #>  #> Call: #> lm(formula = sleep_duration ~ age + gender + emot * cons, data = sleep_emo_con) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -6.0841 -0.7882  0.0089  0.9440  6.1189  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)  1.85154    1.35224   1.369  0.17155    #> age          0.01789    0.02133   0.838  0.40221    #> gendermale  -0.26127    0.16579  -1.576  0.11570    #> emot         1.32151    0.45039   2.934  0.00350 ** #> cons         1.20385    0.37062   3.248  0.00124 ** #> emot:cons   -0.33140    0.13273  -2.497  0.01286 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.384 on 494 degrees of freedom #> Multiple R-squared:  0.0548, Adjusted R-squared:  0.04523  #> F-statistic: 5.728 on 5 and 494 DF,  p-value: 3.768e-05 plotmod(lm_out,         x = \"emot\",         w = \"cons\",         x_label = \"Emotional Stability\",         w_label = \"Conscientiousness\",         y_label = \"Sleep Duration\")"},{"path":"https://sfcheung.github.io/stdmod/articles/moderation.html","id":"standardized-moderation-effect","dir":"Articles","previous_headings":"","what":"Standardized Moderation Effect","title":"Standardized Moderation Effect by std_selected()","text":"get correct standardized solution moderated regression, product term formed standardization, can use std_selected(). first argument regression output lm(). argument to_center specifies variables mean centered. argument to_scale specifies variables rescaled standard deviations centering. stdmod 0.2.6.3, argument to_standardize introduced shortcut. Listing variable to_standardize equivalent listing to_center to_scale. want standardize mean center variables, can use ~ . shortcut. Note std_selected() automatically skip categorical variables (.e., factors string variables regression model lm()). 0.2.6.3, standardize variables except categorical variables, need use to_center = ~ . to_scale = ~ .. Since 0.2.6.3, can just use to_standardize = ~ ., shown . to_standardize = ~ . work, just use to_center to_scale shown : summary results std_selected() can generated summary(): coefficient solution, -0.10829, can interpreted change standardized effect emotional stability one standard deviation increase conscientiousness. Naturally, can called standardized moderation effect conscientiousness (Cheung, Cheung, Lau, Hui, & Vong, 2022). output std_selected() can passed functions accept output lm(). package also simple function, plotmod(), generating typical plot moderation effect:  function plotmod() also prints conditional effects predictor (focal variable), emotional stability example.","code":"lm_stdall <- std_selected(lm_out,                           to_standardize = ~ .) lm_stdall <- std_selected(lm_out,                           to_center = ~ .,                           to_scale = ~ .) summary(lm_stdall) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_out, to_standardize = ~.) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: sleep_duration age gender emot cons #> - Variable(s) scaled: sleep_duration age gender emot cons #>  #>                centered_by scaled_by                            Note #> sleep_duration    6.776333 1.4168291 Standardized (mean = 0, SD = 1) #> age              22.274000 2.9407857 Standardized (mean = 0, SD = 1) #> gender                  NA        NA Nonnumeric                      #> emot              2.713200 0.7629613 Standardized (mean = 0, SD = 1) #> cons              3.343200 0.6068198 Standardized (mean = 0, SD = 1) #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = sleep_duration ~ age + gender + emot * cons, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.2941 -0.5563  0.0063  0.6663  4.3187  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)   0.0549     0.0488  1.1248  0.26124    #> age           0.0371     0.0443  0.8384  0.40221    #> gendermale   -0.1844     0.1170 -1.5759  0.11570    #> emot          0.1150     0.0449  2.5600  0.01076 *  #> cons          0.1305     0.0452  2.8893  0.00403 ** #> emot:cons    -0.1083     0.0434 -2.4967  0.01286 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.9771 on 494 degrees of freedom #>  #> R-squared                : 0.0548 #> Adjusted R-squared       : 0.0452 #> ANOVA test of R-squared  : F(5, 494) = 5.7277, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : emot:cons #> R-squared increase adding this term: 0.0119 #> F test of R-squared increase       : F(1, 494) = 6.2335, p = 0.013 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. plotmod(lm_stdall,         x = \"emot\",         w = \"cons\",         x_label = \"Emotional Stability\",         w_label = \"Conscientiousness\",         y_label = \"Sleep Duration\")"},{"path":"https://sfcheung.github.io/stdmod/articles/moderation.html","id":"the-common-incorrect-standardized-solution","dir":"Articles","previous_headings":"","what":"The Common (Incorrect) Standardized Solution","title":"Standardized Moderation Effect by std_selected()","text":"comparison, results standardizing variables, including product term categorical variable. coefficient standardized product term -0.78201, interpreted change standardized effect emotional stability one standard deviation increase conscientiousness product term standardized can longer interpreted product two variables model.","code":"library(lm.beta) # For generating the typical standardized solution packageVersion(\"lm.beta\") #> [1] '1.7.2' lm_beta <- lm.beta(lm_out) summary(lm_beta) #>  #> Call: #> lm(formula = sleep_duration ~ age + gender + emot * cons, data = sleep_emo_con) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -6.0841 -0.7882  0.0089  0.9440  6.1189  #>  #> Coefficients: #>             Estimate Standardized Std. Error t value Pr(>|t|)    #> (Intercept)  1.85154           NA    1.35224   1.369  0.17155    #> age          0.01789      0.03712    0.02133   0.838  0.40221    #> gendermale  -0.26127     -0.06934    0.16579  -1.576  0.11570    #> emot         1.32151      0.71163    0.45039   2.934  0.00350 ** #> cons         1.20385      0.51560    0.37062   3.248  0.00124 ** #> emot:cons   -0.33140     -0.78201    0.13273  -2.497  0.01286 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.384 on 494 degrees of freedom #> Multiple R-squared:  0.0548, Adjusted R-squared:  0.04523  #> F-statistic: 5.728 on 5 and 494 DF,  p-value: 3.768e-05"},{"path":"https://sfcheung.github.io/stdmod/articles/moderation.html","id":"improved-confidence-intervals","dir":"Articles","previous_headings":"","what":"Improved Confidence Intervals","title":"Standardized Moderation Effect by std_selected()","text":"shown (e.g., Yuan & Chan, 2011) standard errors standardized regression coefficients computed just standardizing variables biased, consequently confidence intervals also invalid. function std_selected_boot() wrapper std_selected() also forms confidence interval regression coefficients standardizing conducted, using nonparametric bootstrapping suggested Cheung, Cheung, Lau, Hui, Vong (2022). use example standardizes variables except categorical variables illustrate function. argument nboot specifies number nonparametric bootstrap samples. level confidence set conf. default .95, denoting 95% confidence intervals. desired level, argument can omitted. default options acceptable, additional argument nboot. standardized moderation effect -0.1083, 95% nonparametric bootstrap confidence interval -0.2040 -0.0097. Note: side product, nonparametric bootstrap percentile confidence coefficients also reported. can used variables standardized model, whether involved moderation .","code":"set.seed(649017) lm_xwy_std_ci <- std_selected_boot(lm_out,                                    to_standardize = ~ .,                                    nboot = 2000) summary(lm_xwy_std_ci) #>  #> Call to std_selected_boot(): #> std_selected_boot(lm_out = lm_out, to_scale = ~., to_center = ~.,  #>     nboot = 2000) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: sleep_duration age gender emot cons #> - Variable(s) scaled: sleep_duration age gender emot cons #>  #>                centered_by scaled_by                            Note #> sleep_duration    6.776333 1.4168291 Standardized (mean = 0, SD = 1) #> age              22.274000 2.9407857 Standardized (mean = 0, SD = 1) #> gender                  NA        NA Nonnumeric                      #> emot              2.713200 0.7629613 Standardized (mean = 0, SD = 1) #> cons              3.343200 0.6068198 Standardized (mean = 0, SD = 1) #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #> - Nonparametric bootstrapping 95% confidence intervals computed. #> - The number of bootstrap samples is 2000. #>  #> Call: #> lm(formula = sleep_duration ~ age + gender + emot * cons, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.2941 -0.5563  0.0063  0.6663  4.3187  #>  #> Coefficients: #>             Estimate CI Lower CI Upper Std. Error t value Pr(>|t|)    #> (Intercept)   0.0549   0.0030   0.1043     0.0488  1.1248  0.26124    #> age           0.0371  -0.0363   0.1036     0.0443  0.8384  0.40221    #> gendermale   -0.1844  -0.4389   0.0876     0.1170 -1.5759  0.11570    #> emot          0.1150   0.0236   0.2024     0.0449  2.5600  0.01076 *  #> cons          0.1305   0.0324   0.2242     0.0452  2.8893  0.00403 ** #> emot:cons    -0.1083  -0.2040  -0.0097     0.0434 -2.4967  0.01286 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.9771 on 494 degrees of freedom #>  #> R-squared                : 0.0548 #> Adjusted R-squared       : 0.0452 #> ANOVA test of R-squared  : F(5, 494) = 5.7277, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : emot:cons #> R-squared increase adding this term: 0.0119 #> F test of R-squared increase       : F(1, 494) = 6.2335, p = 0.013 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - [CI Lower, CI Upper] are bootstrap percentile confidence intervals. #> - Std. Error are not bootstrap SEs."},{"path":"https://sfcheung.github.io/stdmod/articles/moderation.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Standardized Moderation Effect by std_selected()","text":"vignette(\"plotmod\", package = \"stdmod\") illustrates use plotmod() plot moderation effect. variables standardized std_selected(), plotmod() can indicate plot. vignette(\"cond_effect\", package = \"stdmod\") illustrates use cond_effect() compute conditional effects, effect predictor (focal variable) selected levels moderator. cond_effect() supports outputs std_selected().","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/moderation.html","id":"references","dir":"Articles","previous_headings":"","what":"Reference(s)","title":"Standardized Moderation Effect by std_selected()","text":"Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. https://doi.org/10.1037/hea0001188. Yuan, K.-H., & Chan, W. (2011). Biases standard errors standardized regression coefficients. Psychometrika, 76(4), 670-690. https://doi.org/10.1007/s11336-011-9224-6","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Moderation Effects Plots by plotmod()","text":"vignette illustrates use plotmod() stdmod package. package can found vignette(\"stdmod\", package = \"stdmod\") https://sfcheung.github.io/stdmod/.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"what-plotmod-can-do","dir":"Articles","previous_headings":"","what":"What plotmod() Can Do","title":"Moderation Effects Plots by plotmod()","text":"can visualize moderation effect plotting effect predictor (focal variable) outcome variable (dependent variable) different levels moderator:  can also plot tumble graph (Bodner, 2016), width line depends distribution predictor (focal variable) level moderator:  plotmod() designed versatile tool. designed function “good-enough” common scenarios. output plotmod() ggplot object can manipulated functions ggplot2 package.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"model-predictor-x-and-moderator-w","dir":"Articles","previous_headings":"Major Arguments","what":"Model, Predictor (x), and Moderator (w)","title":"Moderation Effects Plots by plotmod()","text":"output: output lm(), std_selected(), std_selected_boot(), least one interaction term. x: predictor (focal variable). variable horizontal axis. w: moderator. variable conditional effects plotted. required arguments. Just setting can generate graph:","code":"library(stdmod) data(sleep_emo_con) lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) plotmod(lm_raw,         x = \"emotional_stability\",         w = \"conscientiousness\")"},{"path":[]},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"numeric-moderators","dir":"Articles","previous_headings":"Major Arguments > Levels of the Moderator","what":"Numeric Moderators","title":"Moderation Effects Plots by plotmod()","text":"moderator numeric variable, two lines drawn, default. One line one standard deviation (SD) mean moderator (“Low”), one SD mean (“High”). Users can also use percentiles define “Low” “High” setting w_method \"percentile\". default, 16th percentile 84th percentile used, correspond approximately one SD mean, respectively, normal distribution.","code":"lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) plotmod(lm_raw,         x = \"emotional_stability\",         w = \"conscientiousness\",         w_method = \"percentile\")"},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"categorical-moderators","dir":"Articles","previous_headings":"Major Arguments > Levels of the Moderator","what":"Categorical Moderators","title":"Moderation Effects Plots by plotmod()","text":"moderator categorical variable (string variable factor), one line drawn category.","code":"set.seed(61452) sleep_emo_con$city <- sample(c(\"Alpha\", \"Beta\", \"Gamma\"),                              nrow(sleep_emo_con),                              replace = TRUE) lm_cat <- lm(sleep_duration ~ age + gender +                               emotional_stability * city,              sleep_emo_con) plotmod(lm_cat,         x = \"emotional_stability\",         w = \"city\")"},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"tumble-graph","dir":"Articles","previous_headings":"Major Arguments","what":"Tumble Graph","title":"Moderation Effects Plots by plotmod()","text":"default, line starts one SD mean predictor one SD mean predictor. assumes variation predictor different levels moderator. However, may case predictor moderator associated. Bodner (2016) proposed type graph called tumble graph can show association predictor moderator, . idea simple. Instead using SD predictor whole sample, mean SD predictor selected level moderator used. (See technical notes implemented plotmod().) plot tumble graph, just set graph_type \"tumble\":  graph shows , distribution predictor shifts left moderator low.","code":"lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) plotmod(lm_raw,         x = \"emotional_stability\",         w = \"conscientiousness\",         graph_type = \"tumble\")"},{"path":[]},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"variable-labels","dir":"Articles","previous_headings":"Decoration and Annotation","what":"Variable Labels","title":"Moderation Effects Plots by plotmod()","text":"default, variable names used graph. Users can supply labels used instead variable names setting x_label, w_label, y_label strings predictor, moderator, outcome variable, respectively.","code":"lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) plotmod(lm_raw,         x = \"emotional_stability\",         w = \"conscientiousness\",         x_label = \"EMO\",         w_label = \"CON\",         y_label = \"SLEEP\")"},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"title","dir":"Articles","previous_headings":"Decoration and Annotation","what":"Title","title":"Moderation Effects Plots by plotmod()","text":"default title “Moderation Effect”. can changed via argument title:  journals require submitted figures title described figure captions, supplied separately. title can disabled setting no_title TRUE.","code":"lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) plotmod(lm_raw,         x = \"emotional_stability\",         w = \"conscientiousness\",         title = \"EMO Effects For Low/High CON\")"},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"line-width-and-point-size","dir":"Articles","previous_headings":"Decoration and Annotation","what":"Line Width and Point Size","title":"Moderation Effects Plots by plotmod()","text":"plotmod() supports basic control lines. width lines can set line_width size end-points can set point_size:","code":"lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) plotmod(lm_raw,         x = \"emotional_stability\",         w = \"conscientiousness\",         point_size = 8,         line_width = 2)"},{"path":[]},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"conditional-effects","dir":"Articles","previous_headings":"Information","what":"Conditional Effects","title":"Moderation Effects Plots by plotmod()","text":"default, plotmod() prints conditional effects predictor subtitle. can disabled adding ggplot2::theme() call output set plot.subtitle element_blank(), removes subtitle:","code":"lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) p <- plotmod(lm_raw,               x = \"emotional_stability\",               w = \"conscientiousness\") library(ggplot2) p + theme(plot.subtitle = element_blank())"},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"definitions-of-the-levels-of-the-moderator","dir":"Articles","previous_headings":"Information","what":"Definitions of the Levels of the Moderator","title":"Moderation Effects Plots by plotmod()","text":"default, definitions levels moderator (e.g., one SD mean “Low” one SD mean “High”) printed caption. can also disabled adding ggplot2::theme() call set plot.caption element_blank():","code":"lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) p <- plotmod(lm_raw,              x = \"emotional_stability\",              w = \"conscientiousness\") p + theme(plot.caption = element_blank())"},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"any-variables-standardized","dir":"Articles","previous_headings":"Information","what":"Any Variables Standardized?","title":"Moderation Effects Plots by plotmod()","text":"output generated std_selected() std_selected_boot(), plotmod() try detect variable standardized , report graph: output std_selected() can passed plotmod():  predictor, moderator, outcome variable standardized, moderation effect standardized moderation effect (Cheung, Cheung, Lau, Hui, & Vong, 2022), conditional effect printed graph standardized effects predictor different levels moderator. variables standardized reported main text figure need report , set note_standardized FALSE.","code":"lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) lm_std <- std_selected(lm_raw,                        to_standardize = ~ emotional_stability + conscientiousness) # Before Version 0.2.6.3 of stdmod, to_center and to_scale need to be used: # lm_std <- std_selected(lm_raw, #                        to_center = ~ emotional_stability + conscientiousness, #                        to_scale = ~ emotional_stability + conscientiousness) plotmod(lm_std,         x = \"emotional_stability\",         w = \"conscientiousness\")"},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"tweak-the-graph","dir":"Articles","previous_headings":"","what":"Tweak the Graph","title":"Moderation Effects Plots by plotmod()","text":"output plotmod() ggplot object. Therefore, can manipulated functions modify ggplot object. example, users can change colors lines theme:","code":"lm_raw <- lm(sleep_duration ~ age + gender +                               emotional_stability * conscientiousness,              sleep_emo_con) p <- plotmod(lm_std,               x = \"emotional_stability\",               w = \"conscientiousness\") p + scale_color_manual(values = c(\"blue\", \"red\")) +     theme_classic()"},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"technical-notes-for-tumble-graph","dir":"Articles","previous_headings":"","what":"Technical Notes for Tumble Graph","title":"Moderation Effects Plots by plotmod()","text":"Bodner (2016) proposed regressing predictor moderator. plotmod() uses nonparametric approach. moderator numerical, level moderator, say, one SD mean, certain percentage cases (16% cases value moderator) used compute mean SD predictor, used determine end-points line segment level. moderator categorical, mean SD cases group used determine end-points line segment.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Moderation Effects Plots by plotmod()","text":"Please refer help page plotmod() options available.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/plotmod.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Moderation Effects Plots by plotmod()","text":"Bodner, T. E. (2016). Tumble graphs: Avoiding misleading end point extrapolation graphing interactions moderated multiple regression analysis. Journal Educational Behavioral Statistics, 41(6), 593-604. Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. https://doi.org/10.1037/hea0001188.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"Instead standardizing variables, even variables () categorical standardized, (b) measured meaningful unites need standardized, std_selected() package stdmod allows users control standardization conducted. moderated regression model used example can also used regression models without interaction terms. package can found vignette(\"stdmod\", package = \"stdmod\") https://sfcheung.github.io/stdmod/.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"setup-the-environment","dir":"Articles","previous_headings":"","what":"Setup the Environment","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"","code":"library(stdmod)"},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"load-the-dataset","dir":"Articles","previous_headings":"","what":"Load the Dataset","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"data set 500 cases data. variables sleep duration, age, gender, scores two personality scales, emotional stability conscientiousness IPIP Big Five markers. Please refer (citation included) detail data set. names variables shortened readability:","code":"data(sleep_emo_con) head(sleep_emo_con, 3) #>   case_id sleep_duration conscientiousness emotional_stability age gender #> 1       1              6               3.6                 3.6  20 female #> 2       2              4               3.8                 2.4  20 female #> 3       3              7               4.3                 2.7  20 female colnames(sleep_emo_con)[3:4] <- c(\"cons\", \"emot\") head(sleep_emo_con, 3) #>   case_id sleep_duration cons emot age gender #> 1       1              6  3.6  3.6  20 female #> 2       2              4  3.8  2.4  20 female #> 3       3              7  4.3  2.7  20 female"},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"moderated-regression","dir":"Articles","previous_headings":"","what":"Moderated Regression","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"Suppose interested predicting sleep duration emotional stability, controlling gender age. However, suspect effect emotional stability, , may moderated conscientiousness. Therefore, conduct moderated regression follow: results show conscientiousness significantly moderates effect emotional stability sleep duration. package simple function, plotmod(), generating typical plot moderation effect:  function plotmod() also prints conditional effects predictor, emotional stability example.","code":"lm_raw <- lm(sleep_duration ~ age + gender + emot * cons,              data = sleep_emo_con) summary(lm_raw) #>  #> Call: #> lm(formula = sleep_duration ~ age + gender + emot * cons, data = sleep_emo_con) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -6.0841 -0.7882  0.0089  0.9440  6.1189  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)  1.85154    1.35224   1.369  0.17155    #> age          0.01789    0.02133   0.838  0.40221    #> gendermale  -0.26127    0.16579  -1.576  0.11570    #> emot         1.32151    0.45039   2.934  0.00350 ** #> cons         1.20385    0.37062   3.248  0.00124 ** #> emot:cons   -0.33140    0.13273  -2.497  0.01286 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.384 on 494 degrees of freedom #> Multiple R-squared:  0.0548, Adjusted R-squared:  0.04523  #> F-statistic: 5.728 on 5 and 494 DF,  p-value: 3.768e-05 plotmod(lm_raw,         x = \"emot\",         w = \"cons\",         x_label = \"Emotional Stability\",         w_label = \"Conscientiousness\",         y_label = \"Sleep Duration\")"},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"mean-center-the-moderator","dir":"Articles","previous_headings":"","what":"Mean Center the Moderator","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"know effect emotional stability conscientiousness equal mean, can center conscientiousness mean data redo moderated regression. Instead creating new variable rerun regression, can pass lm() output std_selected() specify variables mean centered: argument meaning centering to_center. variable specified formula form, placing right hand side formula. example, conscientiousness mean level, effect emotional stability 0.2136.","code":"lm_w_centered <- std_selected(lm_raw,                               to_center = ~ cons) printCoefmat(summary(lm_w_centered)$coefficients, digits = 3) #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   5.8763     0.5170   11.37   <2e-16 *** #> age           0.0179     0.0213    0.84   0.4022     #> gendermale   -0.2613     0.1658   -1.58   0.1157     #> emot          0.2136     0.0834    2.56   0.0108 *   #> cons          1.2039     0.3706    3.25   0.0012 **  #> emot:cons    -0.3314     0.1327   -2.50   0.0129 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"mean-center-the-moderator-and-the-focal-variable","dir":"Articles","previous_headings":"","what":"Mean Center The Moderator and the Focal Variable","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"example demonstrates centering one variable. following model, emotional stability conscientiousness centered. placed ~ joined +.","code":"lm_xw_centered <- std_selected(lm_raw,                                to_center = ~ emot + cons) printCoefmat(summary(lm_xw_centered)$coefficients, digits = 3) #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   6.4557     0.4783   13.50   <2e-16 *** #> age           0.0179     0.0213    0.84    0.402     #> gendermale   -0.2613     0.1658   -1.58    0.116     #> emot          0.2136     0.0834    2.56    0.011 *   #> cons          0.3047     0.1055    2.89    0.004 **  #> emot:cons    -0.3314     0.1327   -2.50    0.013 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"standardize-the-moderator-and-the-focal-variable","dir":"Articles","previous_headings":"","what":"Standardize The Moderator and The Focal Variable","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"standardize variable first mean center scale standard deviation. Scaling done listing variable to_scale. input format identical to_center. Since 0.2.6.3 stdmod, to_standardize can used shortcut. Listing variable to_standardize equivalent listing to_center to_scale. Therefore, following call can also used: example, conscientiousness mean level, one standard deviation increase emotional stability, predicted sleep duration increases 0.1630 hour.  function plotmod() automatically checks whether variable standardized. yes, report plot table note bottom. pattern plot change. However, conditional effects reported graph now based model emotional stability conscientiousness standardized.","code":"lm_xw_std <- std_selected(lm_raw,                           to_center = ~ emot + cons,                           to_scale  = ~ emot + cons) lm_xw_std <- std_selected(lm_raw,                           to_standardize = ~ emot + cons) printCoefmat(summary(lm_xw_std)$coefficients, digits = 3) #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   6.4557     0.4783   13.50   <2e-16 *** #> age           0.0179     0.0213    0.84    0.402     #> gendermale   -0.2613     0.1658   -1.58    0.116     #> emot          0.1630     0.0637    2.56    0.011 *   #> cons          0.1849     0.0640    2.89    0.004 **  #> emot:cons    -0.1534     0.0615   -2.50    0.013 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 plotmod(lm_xw_std,         x = \"emot\",         w = \"cons\",         x_label = \"Emotional Stability\",         w_label = \"Conscientiousness\",         y_label = \"Sleep Duration\")"},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"standardize-the-moderator-the-focal-variable-and-the-outcome-variable","dir":"Articles","previous_headings":"","what":"Standardize The Moderator, The Focal Variable, and the Outcome Variable","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"can also mean center standardize outcome variable (dependent variable). just add variable right hand side ~ to_center to_scale appropriate. Since 0.2.6.3, to_standardize can used shortcut: example, conscientiousness mean level, standardized moderation effect emotional stability sleep duration 0.1150.  , pattern plot change, conditional effects reported graph now based model emotional stability, conscientiousness, sleep duration standardized.","code":"lm_xwy_std <- std_selected(lm_raw,                            to_center = ~ emot + cons + sleep_duration,                            to_scale  = ~ emot + cons + sleep_duration) lm_xwy_std <- std_selected(lm_raw,                            to_standardize = ~ emot + cons + sleep_duration) printCoefmat(summary(lm_xwy_std)$coefficients, digits = 3) #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)  -0.2263     0.3376   -0.67    0.503    #> age           0.0126     0.0151    0.84    0.402    #> gendermale   -0.1844     0.1170   -1.58    0.116    #> emot          0.1150     0.0449    2.56    0.011 *  #> cons          0.1305     0.0452    2.89    0.004 ** #> emot:cons    -0.1083     0.0434   -2.50    0.013 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 plotmod(lm_xwy_std,         x = \"emot\",         w = \"cons\",         x_label = \"Emotional Stability\",         w_label = \"Conscientiousness\",         y_label = \"Sleep Duration\")"},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"standardize-all-variables","dir":"Articles","previous_headings":"","what":"Standardize All Variables","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"want standardize variables except categorical variables, , can use ~ . shortcut. std_selected() automatically skip categorical variables (.e., factors string variables regression model lm()). Since 0.2.6.3, to_standardize can used shortcut:","code":"lm_all_std <- std_selected(lm_raw,                            to_center = ~ .,                            to_scale  = ~ .) lm_all_std <- std_selected(lm_raw,                            to_standardize = ~ .) printCoefmat(summary(lm_all_std)$coefficients, digits = 3) #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)   0.0549     0.0488    1.12    0.261    #> age           0.0371     0.0443    0.84    0.402    #> gendermale   -0.1844     0.1170   -1.58    0.116    #> emot          0.1150     0.0449    2.56    0.011 *  #> cons          0.1305     0.0452    2.89    0.004 ** #> emot:cons    -0.1083     0.0434   -2.50    0.013 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"the-usual-standardized-solution","dir":"Articles","previous_headings":"","what":"The Usual Standardized Solution","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"comparison, results standardizing variables, including product term categorical variable. moderated regression, coefficient standardized product term, -0.7820, interpretable. coefficient standardized gender, -0.0693, also difficult interpret.","code":"library(lm.beta) # For generating the typical standardized solution packageVersion(\"lm.beta\") #> [1] '1.7.2' lm_usual_std <- lm.beta(lm_raw) printCoefmat(summary(lm_usual_std)$coefficients, digits = 3) #>             Estimate Standardized Std. Error t value Pr(>|t|)    #> (Intercept)   1.8515           NA     1.3522    1.37   0.1715    #> age           0.0179       0.0371     0.0213    0.84   0.4022    #> gendermale   -0.2613      -0.0693     0.1658   -1.58   0.1157    #> emot          1.3215       0.7116     0.4504    2.93   0.0035 ** #> cons          1.2039       0.5156     0.3706    3.25   0.0012 ** #> emot:cons    -0.3314      -0.7820     0.1327   -2.50   0.0129 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"improved-confidence-interval-for-betas","dir":"Articles","previous_headings":"","what":"Improved Confidence Interval For “Betas”","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"shown (e.g., Yuan & Chan, 2011) standard errors standardized regression coefficients (betas) computed just standardizing variables biased, consequently confidence intervals also invalid. function std_selected_boot() wrapper std_selected() also forms confidence interval regression coefficients standardization conducted, using nonparametric bootstrapping suggested Cheung, Cheung, Lau, Hui, Vong (2022). use example standardizes emotional stability, conscientiousness, sleep duration, illustrate function. argument nboot specifies number nonparametric bootstrap samples. level confidence set conf. default .95, denoting 95% confidence intervals. desired level, argument can omitted. standardized moderation effect -0.1083 , 95% nonparametric bootstrap percentile confidence interval -0.2005 -0.0077. Note: side product, nonparametric bootstrap confidence coefficients also reported. can used variables standardized model, whether involved moderation .","code":"set.seed(58702) lm_xwy_std_ci <- std_selected_boot(lm_raw,                     to_standardize = ~ emot + cons + sleep_duration,                     nboot = 2000) summary(lm_xwy_std_ci) #>  #> Call to std_selected_boot(): #> std_selected_boot(lm_out = lm_raw, to_scale = ~emot + cons +  #>     sleep_duration, to_center = ~emot + cons + sleep_duration,  #>     nboot = 2000) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: emot cons sleep_duration #> - Variable(s) scaled: emot cons sleep_duration #>  #>                centered_by scaled_by                            Note #> sleep_duration    6.776333 1.4168291 Standardized (mean = 0, SD = 1) #> age               0.000000 1.0000000                                 #> gender                  NA        NA Nonnumeric                      #> emot              2.713200 0.7629613 Standardized (mean = 0, SD = 1) #> cons              3.343200 0.6068198 Standardized (mean = 0, SD = 1) #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #> - Nonparametric bootstrapping 95% confidence intervals computed. #> - The number of bootstrap samples is 2000. #>  #> Call: #> lm(formula = sleep_duration ~ age + gender + emot * cons, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.2941 -0.5563  0.0063  0.6663  4.3187  #>  #> Coefficients: #>             Estimate CI Lower CI Upper Std. Error t value Pr(>|t|)    #> (Intercept)  -0.2263  -0.8315   0.3503     0.3376 -0.6703  0.50298    #> age           0.0126  -0.0128   0.0397     0.0151  0.8384  0.40221    #> gendermale   -0.1844  -0.4484   0.0723     0.1170 -1.5759  0.11570    #> emot          0.1150   0.0256   0.2001     0.0449  2.5600  0.01076 *  #> cons          0.1305   0.0289   0.2323     0.0452  2.8893  0.00403 ** #> emot:cons    -0.1083  -0.2005  -0.0077     0.0434 -2.4967  0.01286 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.9771 on 494 degrees of freedom #>  #> R-squared                : 0.0548 #> Adjusted R-squared       : 0.0452 #> ANOVA test of R-squared  : F(5, 494) = 5.7277, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : emot:cons #> R-squared increase adding this term: 0.0119 #> F test of R-squared increase       : F(1, 494) = 6.2335, p = 0.013 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - [CI Lower, CI Upper] are bootstrap percentile confidence intervals. #> - Std. Error are not bootstrap SEs."},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"information functions can found help pages (std_selected() std_selected_boot()). example, parallel computation can used bootstrapping, number bootstrapping samples requested large.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/std_selected.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Mean Center and Standardize Selected Variable by std_selected()","text":"Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. https://doi.org/10.1037/hea0001188. Yuan, K.-H., & Chan, W. (2011). Biases standard errors standardized regression coefficients. Psychometrika, 76(4), 670-690. https://doi.org/10.1007/s11336-011-9224-6","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A Quick Start Guide on Using std_selected()","text":"vignette illustrates use std_selected(), main function stdmod package. package can found vignette(\"stdmod\", package = \"stdmod\") https://sfcheung.github.io/stdmod/.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"this-guide-shows-to-use-std_selected-to","dir":"Articles","previous_headings":"","what":"This Guide Shows to use std_selected() to:","title":"A Quick Start Guide on Using std_selected()","text":"get correct standardized regression coefficients moderated regression model, form valid confidence intervals standardized regression coefficients using nonparametric bootstrapping takes account sampling variation due standardization.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"sample-dataset","dir":"Articles","previous_headings":"","what":"Sample Dataset","title":"A Quick Start Guide on Using std_selected()","text":"dataset 500 cases, sleep duration (measured average hours), conscientiousness, emotional stability, age, gender (\"female\" \"male\"). names variables shortened readability:","code":"library(stdmod) dat <- sleep_emo_con head(dat, 3) #>   case_id sleep_duration conscientiousness emotional_stability age gender #> 1       1              6               3.6                 3.6  20 female #> 2       2              4               3.8                 2.4  20 female #> 3       3              7               4.3                 2.7  20 female colnames(dat)[2:4] <- c(\"sleep\", \"cons\", \"emot\") head(dat, 3) #>   case_id sleep cons emot age gender #> 1       1     6  3.6  3.6  20 female #> 2       2     4  3.8  2.4  20 female #> 3       3     7  4.3  2.7  20 female"},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"model","dir":"Articles","previous_headings":"","what":"Model","title":"A Quick Start Guide on Using std_selected()","text":"Suppose moderated regression model: Dependent variable (Outcome Variable): sleep duration (sleep) Independent variable (Predictor / Focal Variable): emotional stability (emot) Moderator: conscientiousness (cons) Control variables: age gender lm() can used fit model: unstandardized moderation effect significant, B = -0.3314. one unit increase conscientiousness score, effect emotional stability decreases 0.3314.","code":"lm_out <- lm(sleep ~ age + gender + emot * cons,              dat = dat) summary(lm_out) #>  #> Call: #> lm(formula = sleep ~ age + gender + emot * cons, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -6.0841 -0.7882  0.0089  0.9440  6.1189  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)  1.85154    1.35224   1.369  0.17155    #> age          0.01789    0.02133   0.838  0.40221    #> gendermale  -0.26127    0.16579  -1.576  0.11570    #> emot         1.32151    0.45039   2.934  0.00350 ** #> cons         1.20385    0.37062   3.248  0.00124 ** #> emot:cons   -0.33140    0.13273  -2.497  0.01286 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.384 on 494 degrees of freedom #> Multiple R-squared:  0.0548, Adjusted R-squared:  0.04523  #> F-statistic: 5.728 on 5 and 494 DF,  p-value: 3.768e-05"},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"correct-standardization-for-the-moderated-regression","dir":"Articles","previous_headings":"","what":"Correct Standardization For the Moderated Regression","title":"A Quick Start Guide on Using std_selected()","text":"Suppose want find correct standardized solution moderated regression, , variables except categorical variables standardized. moderated regression model, product term formed standardization. Instead standardization calling lm(), can pass lm() output std_selected(), use ~ . arguments to_scale to_center. Since 0.2.6.3, to_standardize can used shortcut: example, coefficient product term, naturally can called standardized moderation effect, significant, B = -0.1083. one standard deviation increase conscientiousness score, standardized effect emotional stability decreases 0.1083.","code":"lm_stdall <- std_selected(lm_out,                           to_scale = ~ .,                           to_center = ~ .) lm_stdall <- std_selected(lm_out,                           to_standardize = ~ .) summary(lm_stdall) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_out, to_standardize = ~.) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: sleep age gender emot cons #> - Variable(s) scaled: sleep age gender emot cons #>  #>        centered_by scaled_by                            Note #> sleep     6.776333 1.4168291 Standardized (mean = 0, SD = 1) #> age      22.274000 2.9407857 Standardized (mean = 0, SD = 1) #> gender          NA        NA Nonnumeric                      #> emot      2.713200 0.7629613 Standardized (mean = 0, SD = 1) #> cons      3.343200 0.6068198 Standardized (mean = 0, SD = 1) #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = sleep ~ age + gender + emot * cons, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.2941 -0.5563  0.0063  0.6663  4.3187  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)   0.0549     0.0488  1.1248  0.26124    #> age           0.0371     0.0443  0.8384  0.40221    #> gendermale   -0.1844     0.1170 -1.5759  0.11570    #> emot          0.1150     0.0449  2.5600  0.01076 *  #> cons          0.1305     0.0452  2.8893  0.00403 ** #> emot:cons    -0.1083     0.0434 -2.4967  0.01286 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.9771 on 494 degrees of freedom #>  #> R-squared                : 0.0548 #> Adjusted R-squared       : 0.0452 #> ANOVA test of R-squared  : F(5, 494) = 5.7277, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : emot:cons #> R-squared increase adding this term: 0.0119 #> F test of R-squared increase       : F(1, 494) = 6.2335, p = 0.013 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`."},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"the-arguments","dir":"Articles","previous_headings":"Correct Standardization For the Moderated Regression","what":"The Arguments","title":"A Quick Start Guide on Using std_selected()","text":"Standardization equivalent centering mean scaling (dividing ) standard deviation. argument to_center specifies variables centered means, argument to_scale specifies variables scaled standard deviations. formula interface lm() used two arguments, variables right hand side variables centered /scaled. “.” right hand side represents variables model, including outcome variable (sleep duration example). std_selected() also skip categorical variables automatically skipped standardizing make coefficients easy interpret. Since 0.2.6.3, to_standardize added shortcut. Listing variable to_standardize equivalent listing variable to_center to_scale.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"advantage","dir":"Articles","previous_headings":"Correct Standardization For the Moderated Regression","what":"Advantage","title":"A Quick Start Guide on Using std_selected()","text":"Using std_selected minimizes impact workflow. regression usual. Get correct standardized coefficients need interpret .","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"nonparametric-bootstrap-confidence-intervals","dir":"Articles","previous_headings":"Correct Standardization For the Moderated Regression","what":"Nonparametric Bootstrap Confidence Intervals","title":"A Quick Start Guide on Using std_selected()","text":"one problem standardized coefficients. confidence intervals based ordinary least squares (OLS) fitted standardized variables take account sampling variation sample means standard deviations (Yuan & Chan, 2011). Cheung, Cheung, Lau, Hui, Vong (2022) suggest using nonparametric bootstrapping, standardization conducted bootstrap sample. can done std_selected_boot(), wrapper std_selected(): Since 0.2.6.3, to_standardize can used shortcut: minimum additional argument nboot, number bootstrap samples. output similar std_selected(), additional information bootstrapping process. 95% bootstrap percentile confidence interval standardized moderation effect -0.2043 -0.0090.","code":"set.seed(870432) lm_stdall_boot <- std_selected_boot(lm_out,                         to_scale = ~ .,                         to_center = ~ .,                         nboot = 5000) lm_stdall_boot <- std_selected_boot(lm_out,                         to_standardize = ~ .                         nboot = 5000) summary(lm_stdall_boot) #>  #> Call to std_selected_boot(): #> std_selected_boot(lm_out = lm_out, to_scale = ~., to_center = ~.,  #>     nboot = 5000) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: sleep age gender emot cons #> - Variable(s) scaled: sleep age gender emot cons #>  #>        centered_by scaled_by                            Note #> sleep     6.776333 1.4168291 Standardized (mean = 0, SD = 1) #> age      22.274000 2.9407857 Standardized (mean = 0, SD = 1) #> gender          NA        NA Nonnumeric                      #> emot      2.713200 0.7629613 Standardized (mean = 0, SD = 1) #> cons      3.343200 0.6068198 Standardized (mean = 0, SD = 1) #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #> - Nonparametric bootstrapping 95% confidence intervals computed. #> - The number of bootstrap samples is 5000. #>  #> Call: #> lm(formula = sleep ~ age + gender + emot * cons, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.2941 -0.5563  0.0063  0.6663  4.3187  #>  #> Coefficients: #>             Estimate CI Lower CI Upper Std. Error t value Pr(>|t|)    #> (Intercept)   0.0549   0.0072   0.1045     0.0488  1.1248  0.26124    #> age           0.0371  -0.0347   0.1072     0.0443  0.8384  0.40221    #> gendermale   -0.1844  -0.4392   0.0783     0.1170 -1.5759  0.11570    #> emot          0.1150   0.0291   0.2012     0.0449  2.5600  0.01076 *  #> cons          0.1305   0.0288   0.2265     0.0452  2.8893  0.00403 ** #> emot:cons    -0.1083  -0.2043  -0.0090     0.0434 -2.4967  0.01286 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.9771 on 494 degrees of freedom #>  #> R-squared                : 0.0548 #> Adjusted R-squared       : 0.0452 #> ANOVA test of R-squared  : F(5, 494) = 5.7277, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : emot:cons #> R-squared increase adding this term: 0.0119 #> F test of R-squared increase       : F(1, 494) = 6.2335, p = 0.013 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - [CI Lower, CI Upper] are bootstrap percentile confidence intervals. #> - Std. Error are not bootstrap SEs."},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"standardize-independent-variable-focal-variable-and-moderator","dir":"Articles","previous_headings":"","what":"Standardize Independent Variable (Focal Variable) and Moderator","title":"A Quick Start Guide on Using std_selected()","text":"std_selected() std_selected_boot() can also used standardize selected variables. cases want standardize continuous variables measured interpretable units, hours. Suppose want standardize emotional stability conscientiousness, standardize sleep duration. just list emot cons to_center to_scale: Since 0.2.6.3, to_standardize can used shortuct: partially standardized moderation effect -0.1534. one standard deviation increase conscientiousness score, partially standardized effect emotional stability decreases 0.1534.","code":"lm_std1 <- std_selected(lm_out,                         to_scale = ~ emot + cons,                         to_center = ~ emot + cons) lm_std1 <- std_selected(lm_out,                         to_standardize = ~ emot + cons) summary(lm_std1) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_out, to_standardize = ~emot + cons) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: emot cons #> - Variable(s) scaled: emot cons #>  #>        centered_by scaled_by                            Note #> sleep       0.0000 1.0000000                                 #> age         0.0000 1.0000000                                 #> gender          NA        NA Nonnumeric                      #> emot        2.7132 0.7629613 Standardized (mean = 0, SD = 1) #> cons        3.3432 0.6068198 Standardized (mean = 0, SD = 1) #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = sleep ~ age + gender + emot * cons, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -6.0841 -0.7882  0.0089  0.9440  6.1189  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   6.4557     0.4783 13.4979  < 0.001 *** #> age           0.0179     0.0213  0.8384  0.40221     #> gendermale   -0.2613     0.1658 -1.5759  0.11570     #> emot          0.1630     0.0637  2.5600  0.01076 *   #> cons          0.1849     0.0640  2.8893  0.00403 **  #> emot:cons    -0.1534     0.0615 -2.4967  0.01286 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.384 on 494 degrees of freedom #>  #> R-squared                : 0.0548 #> Adjusted R-squared       : 0.0452 #> ANOVA test of R-squared  : F(5, 494) = 5.7277, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : emot:cons #> R-squared increase adding this term: 0.0119 #> F test of R-squared increase       : F(1, 494) = 6.2335, p = 0.013 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`."},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"nonparametric-bootstrap-confidence-intervals-1","dir":"Articles","previous_headings":"Standardize Independent Variable (Focal Variable) and Moderator","what":"Nonparametric Bootstrap Confidence Intervals","title":"A Quick Start Guide on Using std_selected()","text":"function std_selected_boot() can also used form nonparametric bootstrap confidence interval variables standardized: Since 0.2.6.3, to_standardize can used shortcut: , additional argument nboot. 95% bootstrap percentile confidence interval partially standardized moderation effect -0.2915 -0.0124.","code":"set.seed(870432) lm_std1_boot <- std_selected_boot(lm_out,                         to_scale = ~ emot + cons,                         to_center = ~ emot + cons,                         nboot = 5000) lm_std1_boot <- std_selected_boot(lm_out,                         to_standardize = ~ emot + cons,                         nboot = 5000) summary(lm_std1_boot) #>  #> Call to std_selected_boot(): #> std_selected_boot(lm_out = lm_out, to_scale = ~emot + cons, to_center = ~emot +  #>     cons, nboot = 5000) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: emot cons #> - Variable(s) scaled: emot cons #>  #>        centered_by scaled_by                            Note #> sleep       0.0000 1.0000000                                 #> age         0.0000 1.0000000                                 #> gender          NA        NA Nonnumeric                      #> emot        2.7132 0.7629613 Standardized (mean = 0, SD = 1) #> cons        3.3432 0.6068198 Standardized (mean = 0, SD = 1) #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #> - Nonparametric bootstrapping 95% confidence intervals computed. #> - The number of bootstrap samples is 5000. #>  #> Call: #> lm(formula = sleep ~ age + gender + emot * cons, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -6.0841 -0.7882  0.0089  0.9440  6.1189  #>  #> Coefficients: #>             Estimate CI Lower CI Upper Std. Error t value Pr(>|t|)     #> (Intercept)   6.4557   5.6487   7.2735     0.4783 13.4979  < 0.001 *** #> age           0.0179  -0.0184   0.0544     0.0213  0.8384  0.40221     #> gendermale   -0.2613  -0.6233   0.1105     0.1658 -1.5759  0.11570     #> emot          0.1630   0.0405   0.2893     0.0637  2.5600  0.01076 *   #> cons          0.1849   0.0415   0.3229     0.0640  2.8893  0.00403 **  #> emot:cons    -0.1534  -0.2915  -0.0124     0.0615 -2.4967  0.01286 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 1.384 on 494 degrees of freedom #>  #> R-squared                : 0.0548 #> Adjusted R-squared       : 0.0452 #> ANOVA test of R-squared  : F(5, 494) = 5.7277, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : emot:cons #> R-squared increase adding this term: 0.0119 #> F test of R-squared increase       : F(1, 494) = 6.2335, p = 0.013 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - [CI Lower, CI Upper] are bootstrap percentile confidence intervals. #> - Std. Error are not bootstrap SEs."},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"A Quick Start Guide on Using std_selected()","text":"detailed illustration can found vignette(\"moderation\", package = \"stdmod\"). vignette(\"std_selected\", package = \"stdmod\") illustrates std_selected() can used form nonparametric bootstrap percentile confidence interval standardized regression coefficients (“betas”) regression models without product term. information functions can found help pages (std_selected() std_selected_boot()). example, parallel computation can used bootstrapping, number bootstrapping samples request large.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod.html","id":"references","dir":"Articles","previous_headings":"","what":"Reference(s)","title":"A Quick Start Guide on Using std_selected()","text":"Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. https://doi.org/10.1037/hea0001188. Yuan, K.-H., & Chan, W. (2011). Biases standard errors standardized regression coefficients. Psychometrika, 76(4), 670-690. https://doi.org/10.1007/s11336-011-9224-6","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod_lavaan.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Standardized Moderation Effect in a Path Model by stdmod_lavaan()","text":"document demonstrates use stdmod_lavaan() package stdmod compute standardized moderation effect path model fitted lavaan::sem(). package can found vignette(\"stdmod\", package = \"stdmod\") https://sfcheung.github.io/stdmod/.","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod_lavaan.html","id":"setup-the-environment","dir":"Articles","previous_headings":"","what":"Setup the Environment","title":"Standardized Moderation Effect in a Path Model by stdmod_lavaan()","text":"","code":"library(stdmod) # For computing the standardized moderation effect conveniently library(lavaan) # For doing path analysis in lavaan. #> This is lavaan 0.6-17 #> lavaan is FREE software! Please report any bugs."},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod_lavaan.html","id":"load-the-dataset","dir":"Articles","previous_headings":"","what":"Load the Dataset","title":"Standardized Moderation Effect in a Path Model by stdmod_lavaan()","text":"test data set 300 cases, six variables, continuous.","code":"data(test_mod1) round(head(test_mod1, 3), 3) #>       dv     iv    mod    med   cov1   cov2 #> 1 23.879 -0.133 -0.544 10.310 -0.511 -0.574 #> 2 23.096  1.456  1.539 11.384  0.094 -0.264 #> 3 23.201  0.319  1.774  9.615 -0.172  0.488"},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod_lavaan.html","id":"fit-the-model-by-lavaansem","dir":"Articles","previous_headings":"","what":"Fit the Model by lavaan::sem()","title":"Standardized Moderation Effect in a Path Model by stdmod_lavaan()","text":"product term can formed manually colon operator, :. stdmod_lavaan() work cases. model tested: results show mod significantly moderates effect iv med.","code":"mod <- \" med ~ iv + mod + iv:mod + cov1 dv ~ med + cov2 \" fit <- sem(mod, test_mod1, fixed.x = FALSE) summary(fit) #> lavaan 0.6.17 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        23 #>  #>   Number of observations                           300 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 1.058 #>   Degrees of freedom                                 5 #>   P-value (Chi-square)                           0.958 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   med ~                                                #>     iv                0.221    0.030    7.264    0.000 #>     mod               0.104    0.030    3.489    0.000 #>     iv:mod            0.257    0.025   10.169    0.000 #>     cov1              0.104    0.025    4.099    0.000 #>   dv ~                                                 #>     med               0.246    0.041    5.962    0.000 #>     cov2              0.191    0.023    8.324    0.000 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   iv ~~                                                #>     mod               0.481    0.063    7.606    0.000 #>     iv:mod           -0.149    0.059   -2.501    0.012 #>     cov1             -0.033    0.058   -0.575    0.565 #>     cov2             -0.071    0.059   -1.216    0.224 #>   mod ~~                                               #>     iv:mod           -0.180    0.062   -2.923    0.003 #>     cov1             -0.060    0.059   -1.010    0.313 #>     cov2             -0.107    0.061   -1.763    0.078 #>   iv:mod ~~                                            #>     cov1             -0.051    0.061   -0.837    0.403 #>     cov2              0.063    0.063    1.001    0.317 #>   cov1 ~~                                              #>     cov2              0.071    0.061    1.158    0.247 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .med               0.201    0.016   12.247    0.000 #>    .dv                0.169    0.014   12.247    0.000 #>     iv                0.954    0.078   12.247    0.000 #>     mod               1.017    0.083   12.247    0.000 #>     iv:mod            1.088    0.089   12.247    0.000 #>     cov1              1.039    0.085   12.247    0.000 #>     cov2              1.076    0.088   12.247    0.000"},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod_lavaan.html","id":"compute-the-standardized-moderation-effect","dir":"Articles","previous_headings":"","what":"Compute the Standardized Moderation Effect","title":"Standardized Moderation Effect in a Path Model by stdmod_lavaan()","text":"case regression, coefficient iv:mod standardized solution desired standardized coefficient standardizes product term. fitting path model lavaan::lavaan(), can use stdmod_lavaan() compute standardized moderation effect using standard deviations focal variable, moderator, outcome variable (Cheung, Cheung, Lau, Hui, & Vong, 2022). minimal arguments : fit: output lavaan::lavaan() wrappers, lavaan::sem(). x: focal variable, variable effect outcome variable moderated. y: outcome variable. w: moderator. x_w: product term. standardized moderation effect mod iv-med path 0.440.","code":"standardizedSolution(fit)[3, ] #>   lhs op    rhs est.std    se      z pvalue ci.lower ci.upper #> 3 med  ~ iv:mod   0.466 0.043 10.842      0    0.382     0.55 fit_iv_mod_std <- stdmod_lavaan(fit = fit,                                 x = \"iv\",                                 y = \"med\",                                 w = \"mod\",                                 x_w = \"iv:mod\") fit_iv_mod_std #>  #> Call: #> stdmod_lavaan(fit = fit, x = \"iv\", y = \"med\", w = \"mod\", x_w = \"iv:mod\") #>  #>                  Variable #> Focal Variable         iv #> Moderator             mod #> Outcome Variable      med #> Product Term       iv:mod #>  #>              lhs op    rhs   est    se      z pvalue ci.lower ci.upper #> Original     med  ~ iv:mod 0.257 0.025 10.169      0    0.208    0.307 #> Standardized med  ~ iv:mod 0.440    NA     NA     NA       NA       NA"},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod_lavaan.html","id":"form-bootstrap-confidence-interval","dir":"Articles","previous_headings":"","what":"Form Bootstrap Confidence Interval","title":"Standardized Moderation Effect in a Path Model by stdmod_lavaan()","text":"stdmod_lavaan() can also used form nonparametric bootstrap confidence interval standardized moderation effect. two approaches . First, bootstrap confidence intervals requested fitting model, stored bootstrap estimates used. efficient need bootstrapping . fit model , bootstrapping: bootstrapping done fitting model, just adding boot_ci = TRUE enough request nonparametric percentile bootstrap confidence interval: 95% confidence interval standardized moderation effect 0.322 0.539. second approach, covered , uses do_boot() manymome package. generate bootstrap estimates. use stored bootstrap estimates, set boot_out output do_boot(). stored bootstrap estimates used. method can used non-bootstrapping confidence intervals needed fitting model.","code":"fit <- sem(mod, test_mod1, fixed.x = FALSE,            se = \"boot\",            bootstrap = 2000,            iseed = 987543) fit_iv_mod_std_ci <- stdmod_lavaan(fit = fit,                                    x = \"iv\",                                    y = \"med\",                                    w = \"mod\",                                    x_w = \"iv:mod\",                                    boot_ci = TRUE) fit_iv_mod_std_ci #>  #> Call: #> stdmod_lavaan(fit = fit, x = \"iv\", y = \"med\", w = \"mod\", x_w = \"iv:mod\",  #>     boot_ci = TRUE) #>  #>                  Variable #> Focal Variable         iv #> Moderator             mod #> Outcome Variable      med #> Product Term       iv:mod #>  #>              lhs op    rhs   est    se     z pvalue ci.lower ci.upper #> Original     med  ~ iv:mod 0.257 0.035 7.298      0    0.184    0.322 #> Standardized med  ~ iv:mod 0.440    NA    NA     NA    0.322    0.539 #>  #> Confidence interval of standardized moderation effect: #> - Level of confidence: 95% #> - Bootstrapping Method: Nonparametric #> - Type: Percentile #> - Number of bootstrap samples requests:  #> - Number of bootstrap samples with valid results: 2000 #>  #> NOTE: Bootstrapping conducted by the method in 0.2.7.5 or later. To use #> the method in the older versions for reproducing previous results, set #> 'use_old_version' to 'TRUE'."},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod_lavaan.html","id":"remarks","dir":"Articles","previous_headings":"","what":"Remarks","title":"Standardized Moderation Effect in a Path Model by stdmod_lavaan()","text":"function stdmod_lavaan() can used complicated path models. computation standardized moderation effect path model depends standard deviations three variables involved (x, w, y).","code":""},{"path":"https://sfcheung.github.io/stdmod/articles/stdmod_lavaan.html","id":"references","dir":"Articles","previous_headings":"","what":"Reference(s)","title":"Standardized Moderation Effect in a Path Model by stdmod_lavaan()","text":"computation standardized moderation effect based simple formula presented following manuscript, using standard deviations outcome variable, focal variable, moderator: Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. https://doi.org/10.1037/hea0001188.","code":""},{"path":"https://sfcheung.github.io/stdmod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer. David Weng Ngai Vong. Contributor.","code":""},{"path":"https://sfcheung.github.io/stdmod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung SF, Cheung S, Lau EYY, Hui CH, Vong WN (2022). “Improving old way measure moderation effect standardized units.” Health Psychology, 41(7), 502–505. ISSN 1930-7810, 0278-6133, doi:10.1037/hea0001188, https://doi.org/10.1037/hea0001188.","code":"@Article{,   title = {Improving an old way to measure moderation effect in standardized units},   volume = {41},   issn = {1930-7810, 0278-6133},   url = {https://doi.org/10.1037/hea0001188},   doi = {10.1037/hea0001188},   language = {en},   number = {7},   urldate = {2022-08-02},   journal = {Health Psychology},   author = {S. F. Cheung and S.-H. Cheung and E. Y. Y. Lau and C. H. Hui and W. N. Vong},   month = {jul},   year = {2022},   pages = {502--505}, }"},{"path":"https://sfcheung.github.io/stdmod/index.html","id":"stdmod-standardized-moderation-","dir":"","previous_headings":"","what":"Standardized Moderation Effect and Its Confidence Interval","title":"Standardized Moderation Effect and Its Confidence Interval","text":"(Version 0.2.10.1, updated 2024-03-26, release history) (Important changes since 0.2.0.0: Bootstrap confidence intervals variance-covariance matrix estimates defaults confint() vcov() output std_selected_boot().) package includes functions computing standardized moderation effect forming confidence interval nonparametric bootstrapping correctly. described briefly following publication (OSF project page). supports moderated regression conducted stats::lm() path analysis product term conducted lavaan::lavaan(). Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. https://doi.org/10.1037/hea0001188. information package: https://sfcheung.github.io/stdmod/","code":""},{"path":"https://sfcheung.github.io/stdmod/index.html","id":"quick-links","dir":"","previous_headings":"","what":"Quick Links:","title":"Standardized Moderation Effect and Its Confidence Interval","text":"stdmod: quick start use std_selected() std_selected_boot(), two main functions, standardize selected variables regression model refit model. moderation: use std_selected() std_selected_boot() compute standardized moderation effect form nonparametric bootstrap confidence interval. std_selected: use std_selected() mean center standardize selected variables regression models, use std_selected_boot() form nonparametric bootstrap confidence intervals standardized regression coefficients (betas psychology literature). plotmod: generate typical plot moderation effect using plotmod(). cond_effect: compute conditional effects predictor selected levels moderator, form nonparametric bootstrap confidence intervals effects.","code":""},{"path":"https://sfcheung.github.io/stdmod/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Standardized Moderation Effect and Its Confidence Interval","text":"stable CRAN version can installed install.packages(): latest version package GitHub can installed remotes::install_github():","code":"install.packages(\"stdmod\") remotes::install_github(\"sfcheung/stdmod\")"},{"path":"https://sfcheung.github.io/stdmod/index.html","id":"implementation","dir":"","previous_headings":"","what":"Implementation","title":"Standardized Moderation Effect and Its Confidence Interval","text":"main function, std_selected(), accepts lm() output, standardizes variables users, update results. interaction terms present, formed standardization. bootstrap confidence intervals requested using std_selected_boot(), standardization regression repeated bootstrap sample, ensuring sampling variability standardizers (e.g., standard deviations selected variables), also taken account.","code":""},{"path":"https://sfcheung.github.io/stdmod/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Standardized Moderation Effect and Its Confidence Interval","text":"suggestions found bugs, please feel feel open GitHub issue. Thanks.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/add1.std_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'add1' Method for a 'std_selected' Class Object — add1.std_selected","title":"The 'add1' Method for a 'std_selected' Class Object — add1.std_selected","text":"Intercept add1() method raise error.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/add1.std_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The 'add1' Method for a 'std_selected' Class Object — add1.std_selected","text":"","code":"# S3 method for std_selected add1(object, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/add1.std_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The 'add1' Method for a 'std_selected' Class Object — add1.std_selected","text":"object output std_selected() std_selected_boot(). ... Additional arguments. ignored.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/add1.std_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The 'add1' Method for a 'std_selected' Class Object — add1.std_selected","text":"returns nothing. called side effect.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/add1.std_selected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The 'add1' Method for a 'std_selected' Class Object — add1.std_selected","text":"add1() used output lm() processed std_selected() std_selected_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/add1.std_selected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'add1' Method for a 'std_selected' Class Object — add1.std_selected","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.cond_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Effect in a 'cond_effect'-Class Object — coef.cond_effect","title":"Conditional Effect in a 'cond_effect'-Class Object — coef.cond_effect","text":"Return estimates conditional effects output cond_effect() cond_effect_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.cond_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Effect in a 'cond_effect'-Class Object — coef.cond_effect","text":"","code":"# S3 method for cond_effect coef(object, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/coef.cond_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Effect in a 'cond_effect'-Class Object — coef.cond_effect","text":"object output cond_effect() cond_effect_boot(). ... Optional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.cond_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Effect in a 'cond_effect'-Class Object — coef.cond_effect","text":"numeric vector: estimates conditional effects cond_effect-class object.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.cond_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional Effect in a 'cond_effect'-Class Object — coef.cond_effect","text":"just extracts returns column conditional effects cond_effect-class object.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.cond_effect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditional Effect in a 'cond_effect'-Class Object — coef.cond_effect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.cond_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Effect in a 'cond_effect'-Class Object — coef.cond_effect","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>  out <- cond_effect(lm_raw, x = iv, w = mod) out #> The effects of iv on dv, conditional on mod: #>  #>   Level     mod iv Effect   S.E.      t     p Sig #>    High 105.436   412.911 20.827 19.826 0.000 *** #>  Medium 100.395   395.693 14.684 26.948 0.000 *** #>     Low  95.354   378.474 19.249 19.662 0.000 *** #>  #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level     mod % Below From Mean (in SD) #>    High 105.436   84.00              1.00 #>  Medium 100.395   47.40              0.00 #>     Low  95.354   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below). coef(out) #>     High   Medium      Low  #> 412.9112 395.6925 378.4739   lm_std <- std_selected(lm_raw, to_standardize = ~ iv + mod) out <- cond_effect(lm_std, x = iv, w = mod) out #> The effects of iv on dv, conditional on mod: #>  #>   Level    mod iv Effect   S.E.      t     p Sig #>    High  1.000   841.990 42.468 19.826 0.000 *** #>  Medium  0.000   806.878 29.942 26.948 0.000 *** #>     Low -1.000   771.767 39.251 19.662 0.000 *** #>  #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level    mod % Below From Mean (in SD) #>    High  1.000   84.00              1.00 #>  Medium  0.000   47.40              0.00 #>     Low -1.000   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below). #>  #> Note: #>  #> - The variable(s) iv, mod is/are standardized. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `cond_effect_boot()`. coef(out) #>     High   Medium      Low  #> 841.9896 806.8781 771.7667   # Categorical moderator lm_cat <- lm(dv ~ iv*cat1 + v1, dat) summary(lm_cat) #>  #> Call: #> lm(formula = dv ~ iv * cat1 + v1, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2457.67  -506.03     3.46   437.95  2738.18  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   979.20     459.19   2.132   0.0335 *   #> iv            391.03      29.25  13.370   <2e-16 *** #> cat1gp2      -845.49     584.85  -1.446   0.1489     #> cat1gp3       259.55     620.76   0.418   0.6760     #> v1            -19.36      11.00  -1.759   0.0791 .   #> iv:cat1gp2     43.28      38.44   1.126   0.2608     #> iv:cat1gp3    -21.22      41.08  -0.516   0.6058     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 721.3 on 493 degrees of freedom #> Multiple R-squared:  0.5707,\tAdjusted R-squared:  0.5655  #> F-statistic: 109.2 on 6 and 493 DF,  p-value: < 2.2e-16 #>  out <- cond_effect(lm_cat, x = iv, w = cat1) out #> The effects of iv on dv, conditional on cat1: #>  #>  Level cat1 iv Effect   S.E.      t     p Sig #>    gp1  gp1   391.026 29.246 13.370 0.000 *** #>    gp2  gp2   434.302 24.937 17.416 0.000 *** #>    gp3  gp3   369.807 28.858 12.815 0.000 *** #>  #>  #> The regression model: #>  #> \tdv ~ iv * cat1 + v1 coef(out) #>      gp1      gp2      gp3  #> 391.0258 434.3016 369.8068"},{"path":"https://sfcheung.github.io/stdmod/reference/coef.stdmod_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Moderation Effect in a 'stdmod_lavaan' Class Object — coef.stdmod_lavaan","title":"Standardized Moderation Effect in a 'stdmod_lavaan' Class Object — coef.stdmod_lavaan","text":"Return estimate standardized moderation effect output stdmod_lavaan().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.stdmod_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Moderation Effect in a 'stdmod_lavaan' Class Object — coef.stdmod_lavaan","text":"","code":"# S3 method for stdmod_lavaan coef(object, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/coef.stdmod_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Moderation Effect in a 'stdmod_lavaan' Class Object — coef.stdmod_lavaan","text":"object output stdmod_lavaan(). ... Optional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.stdmod_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Moderation Effect in a 'stdmod_lavaan' Class Object — coef.stdmod_lavaan","text":"scalar: estimate standardized moderation effect.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.stdmod_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Moderation Effect in a 'stdmod_lavaan' Class Object — coef.stdmod_lavaan","text":"just extracts returns element stdmod.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.stdmod_lavaan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Moderation Effect in a 'stdmod_lavaan' Class Object — coef.stdmod_lavaan","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/coef.stdmod_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Moderation Effect in a 'stdmod_lavaan' Class Object — coef.stdmod_lavaan","text":"","code":"# Load a test data of 500 cases dat <- test_mod1 library(lavaan) #> This is lavaan 0.6-17 #> lavaan is FREE software! Please report any bugs.  mod <- \" med ~ iv + mod + iv:mod + cov1 dv ~ med + cov2 \" fit <- sem(mod, dat) coef(fit) #>     med~iv    med~mod med~iv:mod   med~cov1     dv~med    dv~cov2   med~~med  #>      0.221      0.104      0.257      0.104      0.246      0.191      0.201  #>     dv~~dv  #>      0.169   # Compute the standardized moderation effect out_noboot <- stdmod_lavaan(fit = fit,                             x = \"iv\",                             y = \"med\",                             w = \"mod\",                             x_w = \"iv:mod\") coef(out_noboot) #> [1] 0.4397874  # Compute the standardized moderation effect and # its confidence interval based on nonparametric bootstrapping # Fit the model with bootstrap confidence intervals # At least 2000 bootstrap samples should be used # in real research. 50 is used here only for # illustration. fit <- sem(mod, dat, se = \"boot\", bootstrap = 50,            iseed = 89574) out_boot <- stdmod_lavaan(fit = fit,                           x = \"iv\",                           y = \"med\",                           w = \"mod\",                           x_w = \"iv:mod\",                           boot_ci = TRUE) coef(out_boot) #> [1] 0.4397874"},{"path":"https://sfcheung.github.io/stdmod/reference/cond_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Effects — cond_effect","title":"Conditional Effects — cond_effect","text":"Compute conditional effects moderated regression model.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/cond_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Effects — cond_effect","text":"","code":"cond_effect(   output,   x = NULL,   w = NULL,   w_method = c(\"sd\", \"percentile\"),   w_percentiles = c(0.16, 0.5, 0.84),   w_sd_to_percentiles = NA,   w_from_mean_in_sd = 1,   w_values = NULL )  cond_effect_boot(   output,   x = NULL,   w = NULL,   ...,   conf = 0.95,   nboot = 100,   boot_args = NULL,   save_boot_est = TRUE,   full_output = FALSE,   do_boot = TRUE )"},{"path":"https://sfcheung.github.io/stdmod/reference/cond_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Effects — cond_effect","text":"output output stats::lm(). can also accept output std_selected() std_selected_boot(). x focal variable (independent variable), , variable effect outcome variable (dependent) moderated. must numeric variable. w moderator. numeric variables categorical variables (character factor) supported. w_method define \"low\", \"medium\", \"high\" moderator levels. Default terms mean standard deviation (SD) moderator, \"sd\": \"low\", \"medium\", \"high\" one SD mean, mean, one SD mean, respectively. equal \"percentile\", percentiles moderator dataset used: \"low\", \"medium\", \"high\" 16th, 50th (median), 84th percentiles, respectively. Ignored w categorical. w_percentiles w_method \"percentile\", argument specifies three percentiles used, divided 100. must vector two numbers. default c(.16, .50, .84), 16th, 50th, 84th percentiles, corresponds approximately one SD mean normal distribution, respectively. Ignored w categorical. w_sd_to_percentiles w_method \"percentile\" argument set number, number used determine percentiles used. lower percentile percentile normal distribution w_sd_to_percentiles SD mean. upper percentile percentile normal distribution w_sd_to_percentiles SD mean. Therefore, w_sd_to_percentiles set 1, lower upper percentiles 16th 84th, respectively. Default NA. w_from_mean_in_sd many SD mean used define \"low\" \"high\" moderator. Default 1. Ignored w categorical. w_values values w used. Default NULL. numeric vector supplied, values used compute conditional effects. arguments generating levels ignored. Note , w standardized centered, values standardized centered w. values always sorted. argument ignored w categorical. ... Arguments passed cond_effect(). conf level confidence confidence interval. Default .95, get 95% confidence intervals. nboot number bootstrap samples. Default 100. boot_args named list arguments passed boot::boot(). Default NULL. save_boot_est TRUE, default, bootstrap estimates saved element boot_est output. full_output Whether full output boot::boot() returned. Default FALSE. TRUE, full output boot::boot() saved element boot_out output. do_boot Whether bootstrapping confidence intervals formed. Default TRUE. FALSE, arguments related bootstrapping ignored.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/cond_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Effects — cond_effect","text":"cond_effect() returns data-frame-like object conditional effects. class cond_effect print method print additional information conditional effects. Additional information stored following attributes: call: original call. output: output object, output lm(). x, y, w: three variables used compute conditional effects: focal variable (x), outcome variable (y), moderator (w). w_method: method used determine values moderator selected levels. w_percentiles percentiles use w_method = \"percentile\". w_sd_to_percentiles: equal NA, scalar, number standard deviation mean used determine percentiles \"low\" \"high\" levels moderator. w_from_mean_in_sd: number SD mean, determining \"low\" \"high\" levels moderator w_method \"sd\". w_empirical_percentiles: actual percentile levels dataset selected levels moderator. numeric vector. w_empirical_z: actual distance mean, SD, selected level moderator. numeric vector. y_standardized, x_standardized, w_standardized: logical scalar, indicating whether outcome variable, focal variable, moderator standardized. cond_effect_boot() also returns data-frame-like object conditional effects class cond_effect, additional information bootstrapping stored attributes: boot_ci: data frame bootstrap confidence intervals conditional effects. nboot: number bootstrap samples requested. conf: level confidence, proportion. boot_est: matrix bootstrap estimates conditional effects. number rows equal nboot, number columns equal number levels moderator. cond_effect_boot_call: call cond_effect_boot(). boot_out: available, original output boot::boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/cond_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional Effects — cond_effect","text":"cond_effect() uses centering approach find conditional effect focal variable. level moderator, value level subtracted moderator scores, model fitted modified data. coefficient focal variable conditional effect focal variable moderator's score equal value. cond_effect_boot() function wrapper cond_effect(). calls cond_effect() bootstrap sample, computes nonparametric bootstrap percentile confidence intervals (Cheung, Cheung, Lau, Hui, & Vong, 2022). output object output std_selected() std_selected_boot(), mean-centering /standardization conducted, repeated bootstrap sample. Therefore, like std_selected_boot(), can used form nonparametric bootstrap confidence intervals standardized effects, though cond_effect_boot() standardized conditional effects. function ignores bootstrapping done std_selected_boot(). bootstrapping. do_boot FALSE, object returns identical cond_effect(). function intentionally argument setting seed random number. Users recommended set seed, e.g., using set.seed() calling , ensure reproducibility.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/cond_effect.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Conditional Effects — cond_effect","text":"cond_effect_boot(): wrapper cond_effect() forms nonparametric bootstrap confidence intervals.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/cond_effect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditional Effects — cond_effect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/cond_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Effects — cond_effect","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>  cond_effect(lm_raw, x = iv, w = mod) #> The effects of iv on dv, conditional on mod: #>  #>   Level     mod iv Effect   S.E.      t     p Sig #>    High 105.436   412.911 20.827 19.826 0.000 *** #>  Medium 100.395   395.693 14.684 26.948 0.000 *** #>     Low  95.354   378.474 19.249 19.662 0.000 *** #>  #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level     mod % Below From Mean (in SD) #>    High 105.436   84.00              1.00 #>  Medium 100.395   47.40              0.00 #>     Low  95.354   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below).  lm_std <- std_selected(lm_raw, to_standardize = ~ iv + mod) cond_effect(lm_std, x = iv, w = mod) #> The effects of iv on dv, conditional on mod: #>  #>   Level    mod iv Effect   S.E.      t     p Sig #>    High  1.000   841.990 42.468 19.826 0.000 *** #>  Medium  0.000   806.878 29.942 26.948 0.000 *** #>     Low -1.000   771.767 39.251 19.662 0.000 *** #>  #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level    mod % Below From Mean (in SD) #>    High  1.000   84.00              1.00 #>  Medium  0.000   47.40              0.00 #>     Low -1.000   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below). #>  #> Note: #>  #> - The variable(s) iv, mod is/are standardized. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `cond_effect_boot()`.  # Categorical moderator lm_cat <- lm(dv ~ iv*cat1 + v1, dat) summary(lm_cat) #>  #> Call: #> lm(formula = dv ~ iv * cat1 + v1, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2457.67  -506.03     3.46   437.95  2738.18  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   979.20     459.19   2.132   0.0335 *   #> iv            391.03      29.25  13.370   <2e-16 *** #> cat1gp2      -845.49     584.85  -1.446   0.1489     #> cat1gp3       259.55     620.76   0.418   0.6760     #> v1            -19.36      11.00  -1.759   0.0791 .   #> iv:cat1gp2     43.28      38.44   1.126   0.2608     #> iv:cat1gp3    -21.22      41.08  -0.516   0.6058     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 721.3 on 493 degrees of freedom #> Multiple R-squared:  0.5707,\tAdjusted R-squared:  0.5655  #> F-statistic: 109.2 on 6 and 493 DF,  p-value: < 2.2e-16 #>  cond_effect(lm_cat, x = iv, w = cat1) #> The effects of iv on dv, conditional on cat1: #>  #>  Level cat1 iv Effect   S.E.      t     p Sig #>    gp1  gp1   391.026 29.246 13.370 0.000 *** #>    gp2  gp2   434.302 24.937 17.416 0.000 *** #>    gp3  gp3   369.807 28.858 12.815 0.000 *** #>  #>  #> The regression model: #>  #> \tdv ~ iv * cat1 + v1   # Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>   lm_std <- std_selected(lm_raw, to_standardize = ~ iv + mod) cond_effect(lm_std, x = iv, w = mod) #> The effects of iv on dv, conditional on mod: #>  #>   Level    mod iv Effect   S.E.      t     p Sig #>    High  1.000   841.990 42.468 19.826 0.000 *** #>  Medium  0.000   806.878 29.942 26.948 0.000 *** #>     Low -1.000   771.767 39.251 19.662 0.000 *** #>  #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level    mod % Below From Mean (in SD) #>    High  1.000   84.00              1.00 #>  Medium  0.000   47.40              0.00 #>     Low -1.000   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below). #>  #> Note: #>  #> - The variable(s) iv, mod is/are standardized. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `cond_effect_boot()`.  # Form nonparametric bootstrap confidence intervals # Use 2000 or even 5000 for nboot in real research out <- cond_effect_boot(lm_std, x = iv, w = mod, nboot = 50) out #> The effects of iv on dv, conditional on mod: #>  #>   Level    mod iv Effect CI Lower CI Upper   S.E.      t     p Sig #>    High  1.000   841.990  745.556  969.398 42.468 19.826 0.000 *** #>  Medium  0.000   806.878  731.389  882.734 29.942 26.948 0.000 *** #>     Low -1.000   771.767  689.364  835.260 39.251 19.662 0.000 *** #>  #> [CI Lower, CI Upper] shows the 95% nonparametric bootstrap confidence #> interval(s) (based on 50 bootstrap samples). #>  #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level    mod % Below From Mean (in SD) #>    High  1.000   84.00              1.00 #>  Medium  0.000   47.40              0.00 #>     Low -1.000   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below). #>  #> Note: #>  #> - The variable(s) iv, mod is/are standardized."},{"path":"https://sfcheung.github.io/stdmod/reference/confint.cond_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for a 'cond_effect' Class Object — confint.cond_effect","title":"Confidence Intervals for a 'cond_effect' Class Object — confint.cond_effect","text":"Return confidence intervals estimates conditional effect output cond_effect() cond_effect_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.cond_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for a 'cond_effect' Class Object — confint.cond_effect","text":"","code":"# S3 method for cond_effect confint(object, parm, level = 0.95, type, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/confint.cond_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for a 'cond_effect' Class Object — confint.cond_effect","text":"object output cond_effect() cond_effect_boot(). parm Ignored function. confidence intervals available levels returned. level level confidence. confidence intervals returned lm(), default .95, .e., 95%. bootstrap percentile confidence intervals, default level used calling cond_effect_boot(). type type confidence intervals. est \"lm\", returns confidence interval given confint() method lm(). set \"boot\", bootstrap percentile confidence intervals returned. Default \"boot\" bootstrap estimates stored object, \"lm\" bootstrap estimates stored. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.cond_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for a 'cond_effect' Class Object — confint.cond_effect","text":"matrix confidence intervals.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.cond_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Intervals for a 'cond_effect' Class Object — confint.cond_effect","text":"bootstrapping used form confidence interval cond_effect_boot(), users can request percentile confidence intervals bootstrap estimates. method bootstrapping .","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.cond_effect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals for a 'cond_effect' Class Object — confint.cond_effect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.cond_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for a 'cond_effect' Class Object — confint.cond_effect","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>  out <- cond_effect(lm_raw, x = iv, w = mod) print(out, t_ci = TRUE) #> The effects of iv on dv, conditional on mod: #>  #>   Level     mod iv Effect   S.E.      t     p Sig CI.Lo(t) CI.Hi(t) #>    High 105.436   412.911 20.827 19.826 0.000 ***  371.991  453.831 #>  Medium 100.395   395.693 14.684 26.948 0.000 ***  366.843  424.543 #>     Low  95.354   378.474 19.249 19.662 0.000 ***  340.654  416.293 #>  #> [CI.Lo(t), CI.Hi(t)] shows the 95% confidence interval(s) based on t #> statistics. #>  #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level     mod % Below From Mean (in SD) #>    High 105.436   84.00              1.00 #>  Medium 100.395   47.40              0.00 #>     Low  95.354   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below). confint(out) #>           2.5 %   97.5 % #> High   371.9915 453.8309 #> Medium 366.8425 424.5426 #> Low    340.6543 416.2935  lm_std <- std_selected(lm_raw, to_center = ~ iv + mod, to_scale = ~ iv + mod) # Alternative: use to_standardize as a shortcut # lm_std <- std_selected(lm_raw, to_standardize = ~ iv + mod) out <- cond_effect(lm_std, x = iv, w = mod) print(out, t_ci = TRUE) #> The effects of iv on dv, conditional on mod: #>  #>   Level    mod iv Effect   S.E.      t     p Sig CI.Lo(t) CI.Hi(t) #>    High  1.000   841.990 42.468 19.826 0.000 ***  758.548  925.431 #>  Medium  0.000   806.878 29.942 26.948 0.000 ***  748.048  865.708 #>     Low -1.000   771.767 39.251 19.662 0.000 ***  694.647  848.887 #>  #> [CI.Lo(t), CI.Hi(t)] shows the 95% confidence interval(s) based on t #> statistics. #> They should not be used when one or more variables are standardized. #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level    mod % Below From Mean (in SD) #>    High  1.000   84.00              1.00 #>  Medium  0.000   47.40              0.00 #>     Low -1.000   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below). #>  #> Note: #>  #> - The variable(s) iv, mod is/are standardized. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `cond_effect_boot()`. confint(out) #>           2.5 %   97.5 % #> High   758.5480 925.4311 #> Medium 748.0485 865.7078 #> Low    694.6468 848.8866  # Categorical moderator lm_cat <- lm(dv ~ iv*cat1 + v1, dat) summary(lm_cat) #>  #> Call: #> lm(formula = dv ~ iv * cat1 + v1, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2457.67  -506.03     3.46   437.95  2738.18  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   979.20     459.19   2.132   0.0335 *   #> iv            391.03      29.25  13.370   <2e-16 *** #> cat1gp2      -845.49     584.85  -1.446   0.1489     #> cat1gp3       259.55     620.76   0.418   0.6760     #> v1            -19.36      11.00  -1.759   0.0791 .   #> iv:cat1gp2     43.28      38.44   1.126   0.2608     #> iv:cat1gp3    -21.22      41.08  -0.516   0.6058     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 721.3 on 493 degrees of freedom #> Multiple R-squared:  0.5707,\tAdjusted R-squared:  0.5655  #> F-statistic: 109.2 on 6 and 493 DF,  p-value: < 2.2e-16 #>  out <- cond_effect(lm_cat, x = iv, w = cat1) print(out, t_ci = TRUE) #> The effects of iv on dv, conditional on cat1: #>  #>  Level cat1 iv Effect   S.E.      t     p Sig CI.Lo(t) CI.Hi(t) #>    gp1  gp1   391.026 29.246 13.370 0.000 ***  333.564  448.487 #>    gp2  gp2   434.302 24.937 17.416 0.000 ***  385.305  483.299 #>    gp3  gp3   369.807 28.858 12.815 0.000 ***  313.107  426.506 #>  #> [CI.Lo(t), CI.Hi(t)] shows the 95% confidence interval(s) based on t #> statistics. #>  #>  #> The regression model: #>  #> \tdv ~ iv * cat1 + v1 confint(out) #>        2.5 %   97.5 % #> gp1 333.5643 448.4873 #> gp2 385.3048 483.2985 #> gp3 313.1071 426.5064"},{"path":"https://sfcheung.github.io/stdmod/reference/confint.std_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for a 'std_selected' Class Object — confint.std_selected","title":"Confidence Intervals for a 'std_selected' Class Object — confint.std_selected","text":"Return confidence intervals estimates output std_selected() std_selected_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.std_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for a 'std_selected' Class Object — confint.std_selected","text":"","code":"# S3 method for std_selected confint(object, parm, level = 0.95, type, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/confint.std_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for a 'std_selected' Class Object — confint.std_selected","text":"object output std_selected() std_selected_boot(). parm parameters (coefficients) confidence intervals returned. missing, confidence intervals parameters returned. level level confidence. confidence intervals returned lm(), default .95, .e., 95%. bootstrap percentile confidence intervals, default level used calling std_selected_boot(). level different original call specified, full_output needs set call std_selected_boot() original bootstrapping output stored. type type confidence intervals. est \"lm\", returns confidence interval given confint() method lm(). set \"boot\", bootstrap percentile confidence intervals returned. Default \"boot\" bootstrap estimates stored object, \"lm\" bootstrap estimates stored. ... Arguments passed summary.lm().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.std_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for a 'std_selected' Class Object — confint.std_selected","text":"matrix confidence intervals.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.std_selected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Intervals for a 'std_selected' Class Object — confint.std_selected","text":"bootstrapping used form confidence interval std_selected_boot(), users can request percentile confidence intervals bootstrap estimates. method bootstrapping .","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.std_selected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals for a 'std_selected' Class Object — confint.std_selected","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.std_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for a 'std_selected' Class Object — confint.std_selected","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>   # Standardize all variables except for categorical variables. # Interaction terms are formed after standardization. lm_std <- std_selected(lm_raw, to_center = ~ .,                                to_scale = ~ .) # Alternative: use to_standardize as a shortcut # lm_std <- std_selected(lm_raw, to_standardize = ~ .) summary(lm_std) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_raw, to_scale = ~., to_center = ~.) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod v1 cat1 #> - Variable(s) scaled: dv iv mod v1 cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> v1      10.13884    2.938932 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96117 -0.39474 -0.02285  0.37579  2.11040  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646     0.0483  1.3385  0.18136     #> iv            0.7374     0.0274 26.9480  < 0.001 *** #> mod           0.2599     0.0274  9.4962  < 0.001 *** #> v1           -0.0343     0.0273 -1.2542  0.21037     #> cat1gp2      -0.1450     0.0656 -2.2089  0.02764 *   #> cat1gp3      -0.0394     0.0688 -0.5734  0.56664     #> iv:mod        0.0321     0.0255  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6077 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. #>   confint(lm_std) #>                   2.5 %      97.5 % #> (Intercept) -0.03021975  0.15938347 #> iv           0.68362100  0.79114661 #> mod          0.20612513  0.31367234 #> v1          -0.08795872  0.01941694 #> cat1gp2     -0.27398880 -0.01602419 #> cat1gp3     -0.17462329  0.09572673 #> iv:mod      -0.01791790  0.08209267  # Use to_standardize as a shortcut lm_std2 <- std_selected(lm_raw, to_standardize = ~ .) # The results are the same confint(lm_std) #>                   2.5 %      97.5 % #> (Intercept) -0.03021975  0.15938347 #> iv           0.68362100  0.79114661 #> mod          0.20612513  0.31367234 #> v1          -0.08795872  0.01941694 #> cat1gp2     -0.27398880 -0.01602419 #> cat1gp3     -0.17462329  0.09572673 #> iv:mod      -0.01791790  0.08209267 confint(lm_std2) #>                   2.5 %      97.5 % #> (Intercept) -0.03021975  0.15938347 #> iv           0.68362100  0.79114661 #> mod          0.20612513  0.31367234 #> v1          -0.08795872  0.01941694 #> cat1gp2     -0.27398880 -0.01602419 #> cat1gp3     -0.17462329  0.09572673 #> iv:mod      -0.01791790  0.08209267 all.equal(confint(lm_std), confint(lm_std2)) #> [1] TRUE  # With bootstrapping # nboot = 100 just for illustration. nboot >= 2000 should be used in read # research. set.seed(89572) lm_std_boot <- std_selected_boot(lm_raw, to_scale = ~ .,                                          to_center = ~ .,                                          nboot = 100) summary(lm_std_boot) #>  #> Call to std_selected_boot(): #> std_selected_boot(lm_out = lm_raw, to_scale = ~., to_center = ~.,  #>     nboot = 100) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod v1 cat1 #> - Variable(s) scaled: dv iv mod v1 cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> v1      10.13884    2.938932 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #> - Nonparametric bootstrapping 95% confidence intervals computed. #> - The number of bootstrap samples is 100. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96117 -0.39474 -0.02285  0.37579  2.11040  #>  #> Coefficients: #>             Estimate CI Lower CI Upper Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646  -0.0194   0.1257     0.0483  1.3385  0.18136     #> iv            0.7374   0.6891   0.7934     0.0274 26.9480  < 0.001 *** #> mod           0.2599   0.1974   0.3192     0.0274  9.4962  < 0.001 *** #> v1           -0.0343  -0.0961   0.0171     0.0273 -1.2542  0.21037     #> cat1gp2      -0.1450  -0.2710  -0.0123     0.0656 -2.2089  0.02764 *   #> cat1gp3      -0.0394  -0.1477   0.0991     0.0688 -0.5734  0.56664     #> iv:mod        0.0321  -0.0049   0.0863     0.0255  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6077 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - [CI Lower, CI Upper] are bootstrap percentile confidence intervals. #> - Std. Error are not bootstrap SEs. #>   # Bootstrap percentile intervals, default when bootstrap was conduced  confint(lm_std_boot) #>                    2.5 %      97.5 % #> (Intercept) -0.019442340  0.12570734 #> iv           0.689068561  0.79335143 #> mod          0.197400624  0.31922399 #> v1          -0.096125083  0.01714287 #> cat1gp2     -0.270961023 -0.01233464 #> cat1gp3     -0.147733373  0.09914400 #> iv:mod      -0.004904705  0.08631912  # Force OLS confidence intervals  confint(lm_std_boot, type = \"lm\") #>                   2.5 %      97.5 % #> (Intercept) -0.03021975  0.15938347 #> iv           0.68362100  0.79114661 #> mod          0.20612513  0.31367234 #> v1          -0.08795872  0.01941694 #> cat1gp2     -0.27398880 -0.01602419 #> cat1gp3     -0.17462329  0.09572673 #> iv:mod      -0.01791790  0.08209267  # Use to_standardize as a shortcut set.seed(89572) lm_std_boot2 <- std_selected_boot(lm_raw, to_standardize = ~ .,                                           nboot = 100) # The results are the same confint(lm_std_boot) #>                    2.5 %      97.5 % #> (Intercept) -0.019442340  0.12570734 #> iv           0.689068561  0.79335143 #> mod          0.197400624  0.31922399 #> v1          -0.096125083  0.01714287 #> cat1gp2     -0.270961023 -0.01233464 #> cat1gp3     -0.147733373  0.09914400 #> iv:mod      -0.004904705  0.08631912 confint(lm_std_boot2) #>                    2.5 %      97.5 % #> (Intercept) -0.019442340  0.12570734 #> iv           0.689068561  0.79335143 #> mod          0.197400624  0.31922399 #> v1          -0.096125083  0.01714287 #> cat1gp2     -0.270961023 -0.01233464 #> cat1gp3     -0.147733373  0.09914400 #> iv:mod      -0.004904705  0.08631912 all.equal(confint(lm_std_boot), confint(lm_std_boot2)) #> [1] TRUE"},{"path":"https://sfcheung.github.io/stdmod/reference/confint.stdmod_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for a 'stdmod_lavaan' Class Object — confint.stdmod_lavaan","title":"Confidence Intervals for a 'stdmod_lavaan' Class Object — confint.stdmod_lavaan","text":"Return confidence interval standardized moderation effect output stdmod_lavaan().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.stdmod_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for a 'stdmod_lavaan' Class Object — confint.stdmod_lavaan","text":"","code":"# S3 method for stdmod_lavaan confint(object, parm, level = 0.95, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/confint.stdmod_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for a 'stdmod_lavaan' Class Object — confint.stdmod_lavaan","text":"object output stdmod_lavaan(). parm Ignored. Always return bootstrap confidence interval standardized moderation effect. level level confidence, default .95, returning 95% confidence interval. ... Additional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.stdmod_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for a 'stdmod_lavaan' Class Object — confint.stdmod_lavaan","text":"one-row matrix confidence intervals.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.stdmod_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Intervals for a 'stdmod_lavaan' Class Object — confint.stdmod_lavaan","text":"bootstrapping used form confidence interval stdmod_lavaan(), users can request percentile confidence interval using stored bootstrap estimate.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.stdmod_lavaan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals for a 'stdmod_lavaan' Class Object — confint.stdmod_lavaan","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/confint.stdmod_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for a 'stdmod_lavaan' Class Object — confint.stdmod_lavaan","text":"","code":"# Load a test data of 500 cases dat <- test_mod1 library(lavaan)  mod <- \" med ~ iv + mod + iv:mod + cov1 dv ~ med + cov2 \" fit <- sem(mod, dat) coef(fit) #>     med~iv    med~mod med~iv:mod   med~cov1     dv~med    dv~cov2   med~~med  #>      0.221      0.104      0.257      0.104      0.246      0.191      0.201  #>     dv~~dv  #>      0.169   # Compute the standardized moderation effect and # its confidence interval based on nonparametric bootstrapping # Fit the model with bootstrap confidence intervals # At least 2000 bootstrap samples should be used # in real research. 50 is used here only for # illustration. fit <- sem(mod, dat, se = \"boot\", bootstrap = 50,            iseed = 89574) out_boot <- stdmod_lavaan(fit = fit,                           x = \"iv\",                           y = \"med\",                           w = \"mod\",                           x_w = \"iv:mod\",                           boot_ci = TRUE) confint(out_boot) #>                2.5 %    97.5 % #> med~iv:mod 0.3157125 0.5199081"},{"path":"https://sfcheung.github.io/stdmod/reference/plotmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Moderation Effect Plot — plotmod","title":"Moderation Effect Plot — plotmod","text":"Plot moderation effect regression model","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/plotmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moderation Effect Plot — plotmod","text":"","code":"plotmod(   output,   x,   w,   x_label,   w_label,   y_label,   title,   digits = 3,   x_from_mean_in_sd = 1,   w_from_mean_in_sd = 1,   w_method = c(\"sd\", \"percentile\"),   w_percentiles = c(0.16, 0.84),   x_method = c(\"sd\", \"percentile\"),   x_percentiles = c(0.16, 0.84),   w_sd_to_percentiles = NA,   x_sd_to_percentiles = NA,   w_values = NULL,   note_standardized = TRUE,   no_title = FALSE,   line_width = 1,   point_size = 5,   graph_type = c(\"default\", \"tumble\") )"},{"path":"https://sfcheung.github.io/stdmod/reference/plotmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moderation Effect Plot — plotmod","text":"output output stats::lm(), std_selected(), std_selected_boot(). x name focal variable (x-axis) `output``. can name variable, without quotes. Currently numeric variables supported. w name moderator output. can name variable, without quotes. x_label label X-axis. Default value x. w_label label legend lines. Default value ofw. y_label label Y-axis. Default name response variable model. title title graph. supplied, generated variable names labels (x_label, y_label, w_label). \"\", title printed. can used plot manuscript submission figures required titles. digits Number decimal places print. Default 3. x_from_mean_in_sd many SD mean used define \"low\" \"high\" focal variable. Default 1. w_from_mean_in_sd many SD mean used define \"low\" \"high\" moderator. Default 1. Ignored w categorical. w_method define \"high\" \"low\" moderator levels. Default terms standard deviation moderator, \"sd\". equal \"percentile\", percentiles moderator dataset used. Ignored w categorical. w_percentiles w_method \"percentile\", argument specifies two percentiles used, divided 100. must vector two numbers. default c(.16, .84), 16th 84th percentiles, corresponds approximately one SD mean normal distribution, respectively. Ignored w categorical. x_method define \"high\" \"low\" focal variable levels. Default terms standard deviation focal variable, \"sd\". equal \"percentile\", percentiles focal variable dataset used. x_percentiles x_method \"percentile\", argument specifies two percentiles used, divided 100. must vector two numbers. default c(.16, .84), 16th 84th percentiles, corresponds approximately one SD mean normal distribution, respectively. w_sd_to_percentiles w_method \"percentile\" argument set number, number used determine percentiles used. lower percentile percentile normal distribution w_sd_to_percentiles SD mean. upper percentile percentile normal distribution w_sd_to_percentiles SD mean. Therefore, w_sd_to_percentiles set 1, lower upper percentiles 16th 84th, respectively. Default NA. x_sd_to_percentiles x_method \"percentile\" argument set number, number used determine percentiles used. lower percentile percentile normal distribution x_sd_to_percentiles SD mean. upper percentile percentile normal distribution x_sd_to_percentiles SD mean. Therefore, x_sd_to_percentiles set 1, lower upper percentiles 16th 84th, respectively. Default NA. w_values values w used. Default NULL. numeric vector supplied, values used compute conditional effects. arguments generating levels ignored. Note , w standardized centered, values standardized centered w. values always sorted. argument ignored w categorical. note_standardized TRUE, check whether variable SD nearly equal one. yes, report plot. Default TRUE. no_title TRUE, title suppressed. Default FALSE. line_width width lines used ggplot2::geom_segment(). Default 1. point_size size points used ggplot2::geom_point(). Default 5. graph_type \"default\", typical line-graph equal end-points plotted. \"tubmle\", tumble graph proposed Bodner (2016) plotted. Default \"default\".","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/plotmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moderation Effect Plot — plotmod","text":"ggplot2 graph. Plotted assigned name. can modified like usual ggplot2 graph.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/plotmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moderation Effect Plot — plotmod","text":"function generate basic ggplot2 graph typically found psychology manuscripts. tries check whether one variables standardized, report plot required. function features typical plots moderation effects. intended flexible tool fine control plots.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/plotmod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Moderation Effect Plot — plotmod","text":"Bodner, T. E. (2016). Tumble graphs: Avoiding misleading end point extrapolation graphing interactions moderated multiple regression analysis. Journal Educational Behavioral Statistics, 41(6), 593-604. doi:10.3102/1076998616657080","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/plotmod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Moderation Effect Plot — plotmod","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/plotmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moderation Effect Plot — plotmod","text":"","code":"# Do a moderated regression by lm lm_out <- lm(sleep_duration ~ age + gender + emotional_stability*conscientiousness, sleep_emo_con) plotmod(lm_out,         x = emotional_stability,         w = conscientiousness,         x_label = \"Emotional Stability\",         w_label = \"Conscientiousness\",         y_label = \"Sleep Duration\")   # Standardize all variables except for categorical variables # Alternative: use to_standardize as a shortcut # lm_std <- std_selected(lm_out, #                        to_standardize = ~ .) lm_std <- std_selected(lm_out,                        to_scale = ~ .,                        to_center = ~ .) plotmod(lm_std,         x = emotional_stability,         w = conscientiousness,         x_label = \"Emotional Stability\",         w_label = \"Conscientiousness\",         y_label = \"Sleep Duration\")   # Tumble Graph plotmod(lm_std,         x = emotional_stability,         w = conscientiousness,         x_label = \"Emotional Stability\",         w_label = \"Conscientiousness\",         y_label = \"Sleep Duration\",         graph_type = \"tumble\")"},{"path":"https://sfcheung.github.io/stdmod/reference/print.cond_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a 'cond_effect' Class Object — print.cond_effect","title":"Print a 'cond_effect' Class Object — print.cond_effect","text":"Print output cond_effect() cond_effect_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.cond_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a 'cond_effect' Class Object — print.cond_effect","text":"","code":"# S3 method for cond_effect print(   x,   nd = 3,   nd_stat = 3,   nd_p = 3,   title = TRUE,   model = TRUE,   level_info = TRUE,   standardized = TRUE,   boot_info = TRUE,   table_only = FALSE,   t_ci = FALSE,   t_ci_level = 0.95,   ... )"},{"path":"https://sfcheung.github.io/stdmod/reference/print.cond_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a 'cond_effect' Class Object — print.cond_effect","text":"x output cond_effect() cond_effect_boot(). nd number digits variables. nd_stat number digits test statistics (e.g., t). nd_p number digits p-values. title TRUE, print title. Default TRUE. model TRUE, print regression model. Default TRUE. level_info TRUE, print information interpreting levels moderator, values levels distance mean. Default TRUE. standardized TRUE one variables standardized, report . Default TRUE.` boot_info TRUE bootstrap estimates x, print information bootstrapping, number bootstrap samples. Default TRUE. table_only TRUE, suppress elements except table conditional effects. Override arguments title, model, level_info. t_ci TRUE, print confidence intervals based t statistics. confidence intervals used variables standardized. t_ci_level level confidence confidence intervals based t statistics. Default .95. ... Additional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.cond_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a 'cond_effect' Class Object — print.cond_effect","text":"x returned invisibility.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.cond_effect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a 'cond_effect' Class Object — print.cond_effect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.cond_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a 'cond_effect' Class Object — print.cond_effect","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat)  cond_effect(lm_raw, x = iv, w = mod) #> The effects of iv on dv, conditional on mod: #>  #>   Level     mod iv Effect   S.E.      t     p Sig #>    High 105.436   412.911 20.827 19.826 0.000 *** #>  Medium 100.395   395.693 14.684 26.948 0.000 *** #>     Low  95.354   378.474 19.249 19.662 0.000 *** #>  #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level     mod % Below From Mean (in SD) #>    High 105.436   84.00              1.00 #>  Medium 100.395   47.40              0.00 #>     Low  95.354   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below).  lm_std <- std_selected(lm_raw, to_scale = ~ iv + mod,                                to_center = ~ iv + mod)  cond_effect(lm_std, x = iv, w = mod) #> The effects of iv on dv, conditional on mod: #>  #>   Level    mod iv Effect   S.E.      t     p Sig #>    High  1.000   841.990 42.468 19.826 0.000 *** #>  Medium  0.000   806.878 29.942 26.948 0.000 *** #>     Low -1.000   771.767 39.251 19.662 0.000 *** #>  #>  #> The regression model: #>  #> \tdv ~ iv * mod + v1 + cat1 #>  #> Interpreting the levels of mod: #>  #>   Level    mod % Below From Mean (in SD) #>    High  1.000   84.00              1.00 #>  Medium  0.000   47.40              0.00 #>     Low -1.000   17.20             -1.00 #>  #> - % Below: The percent of cases equal to or less than a level. #> - From Mean (in SD): Distance of a level from the mean, in standard #>   deviation (+ve above, -ve below). #>  #> Note: #>  #> - The variable(s) iv, mod is/are standardized. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `cond_effect_boot()`."},{"path":"https://sfcheung.github.io/stdmod/reference/print.std_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Basic Information of a 'std_selected' Class Object — print.std_selected","title":"Print Basic Information of a 'std_selected' Class Object — print.std_selected","text":"Provide information centering scaling, along basic model information printed print() method lm().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.std_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Basic Information of a 'std_selected' Class Object — print.std_selected","text":"","code":"# S3 method for std_selected print(x, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/print.std_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Basic Information of a 'std_selected' Class Object — print.std_selected","text":"x output std_selected() std_selected_boot(). ... Arguments passed print() method lm().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.std_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Basic Information of a 'std_selected' Class Object — print.std_selected","text":"x returned invisibly.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.std_selected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Basic Information of a 'std_selected' Class Object — print.std_selected","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.std_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Basic Information of a 'std_selected' Class Object — print.std_selected","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>   # Standardize all variables except for categorical variables. # Interaction terms are formed after standardization. lm_std <- std_selected(lm_raw, to_scale = ~ .,                                to_center = ~ .) lm_std #>  #> - Variable(s) requested to center: dv iv mod v1 cat1 #> - Variable(s) requested to scale: dv iv mod v1 cat1 #> Note: categorical variables will not be centered nor scaled even if requested to do so. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Coefficients: #> (Intercept)           iv          mod           v1      cat1gp2      cat1gp3   #>     0.06458      0.73738      0.25990     -0.03427     -0.14501     -0.03945   #>      iv:mod   #>     0.03209   #>   # With bootstrapping # nboot = 100 just for illustration. nboot >= 2000 should be used in read # research. lm_std_boot <- std_selected_boot(lm_raw, to_scale = ~ .,                                          to_center = ~ .,                                          nboot = 100) lm_std_boot #>  #> - Variable(s) requested to center: dv iv mod v1 cat1 #> - Variable(s) requested to scale: dv iv mod v1 cat1 #> Note: categorical variables will not be centered nor scaled even if requested to do so. #> - Nonparametric bootstrap 95% percentile confidence intervals computed. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Coefficients: #> (Intercept)           iv          mod           v1      cat1gp2      cat1gp3   #>     0.06458      0.73738      0.25990     -0.03427     -0.14501     -0.03945   #>      iv:mod   #>     0.03209   #>"},{"path":"https://sfcheung.github.io/stdmod/reference/print.stdmod_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a 'stdmod_lavaan' Class Object — print.stdmod_lavaan","title":"Print a 'stdmod_lavaan' Class Object — print.stdmod_lavaan","text":"Print output stdmod_lavaan().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.stdmod_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a 'stdmod_lavaan' Class Object — print.stdmod_lavaan","text":"","code":"# S3 method for stdmod_lavaan print(x, conf = 0.95, nd = 3, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/print.stdmod_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a 'stdmod_lavaan' Class Object — print.stdmod_lavaan","text":"x output stdmod_lavaan(). conf nonparametric bootstrapping conducted stdmod_lavaan(), level confidence proportion (.95 denotes 95%), confidence interval. Default .95. nd number digits printed. ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.stdmod_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a 'stdmod_lavaan' Class Object — print.stdmod_lavaan","text":"x returned invisibly.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.stdmod_lavaan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a 'stdmod_lavaan' Class Object — print.stdmod_lavaan","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.stdmod_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a 'stdmod_lavaan' Class Object — print.stdmod_lavaan","text":"","code":"# Load a test data of 500 cases  dat <- test_mod1 library(lavaan)  mod <- \" med ~ iv + mod + iv:mod + cov1 dv ~ med + cov2 \" fit <- sem(mod, dat) coef(fit) #>     med~iv    med~mod med~iv:mod   med~cov1     dv~med    dv~cov2   med~~med  #>      0.221      0.104      0.257      0.104      0.246      0.191      0.201  #>     dv~~dv  #>      0.169   # Compute the standardized moderation effect out_noboot <- stdmod_lavaan(fit = fit,                             x = \"iv\",                             y = \"med\",                             w = \"mod\",                             x_w = \"iv:mod\") out_noboot #>  #> Call: #> stdmod_lavaan(fit = fit, x = \"iv\", y = \"med\", w = \"mod\", x_w = \"iv:mod\") #>  #>                  Variable #> Focal Variable         iv #> Moderator             mod #> Outcome Variable      med #> Product Term       iv:mod #>  #>              lhs op    rhs   est    se      z pvalue ci.lower ci.upper #> Original     med  ~ iv:mod 0.257 0.025 10.169      0    0.208    0.307 #> Standardized med  ~ iv:mod 0.440    NA     NA     NA       NA       NA  # Compute the standardized moderation effect and # its percentile confidence interval based on nonparametric bootstrapping # Fit the model with bootstrap confidence intervals # At least 2000 bootstrap samples should be used # in real research. 50 is used here only for # illustration. fit <- sem(mod, dat, se = \"boot\", bootstrap = 50,            iseed = 89574) out_boot <- stdmod_lavaan(fit = fit,                           x = \"iv\",                           y = \"med\",                           w = \"mod\",                           x_w = \"iv:mod\",                           boot_ci = TRUE)  out_boot #>  #> Call: #> stdmod_lavaan(fit = fit, x = \"iv\", y = \"med\", w = \"mod\", x_w = \"iv:mod\",  #>     boot_ci = TRUE) #>  #>                  Variable #> Focal Variable         iv #> Moderator             mod #> Outcome Variable      med #> Product Term       iv:mod #>  #>              lhs op    rhs   est    se     z pvalue ci.lower ci.upper #> Original     med  ~ iv:mod 0.257 0.033 7.725      0    0.173    0.297 #> Standardized med  ~ iv:mod 0.440    NA    NA     NA    0.316    0.520 #>  #> Confidence interval of standardized moderation effect: #> - Level of confidence: 95% #> - Bootstrapping Method: Nonparametric #> - Type: Percentile #> - Number of bootstrap samples requests:  #> - Number of bootstrap samples with valid results: 50 #>  #> NOTE: Bootstrapping conducted by the method in 0.2.7.5 or later. To use #> the method in the older versions for reproducing previous results, set #> 'use_old_version' to 'TRUE'."},{"path":"https://sfcheung.github.io/stdmod/reference/print.summary.std_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the Summary of a 'std_selected' Class Object — print.summary.std_selected","title":"Print the Summary of a 'std_selected' Class Object — print.summary.std_selected","text":"Print summary generated summary() output std_selected() std_selected_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.summary.std_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the Summary of a 'std_selected' Class Object — print.summary.std_selected","text":"","code":"# S3 method for summary.std_selected print(   x,   ...,   est_digits = 4,   t_digits = 4,   pvalue_less_than = 0.001,   default_style = FALSE )"},{"path":"https://sfcheung.github.io/stdmod/reference/print.summary.std_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the Summary of a 'std_selected' Class Object — print.summary.std_selected","text":"x output summary(). ... Arguments passed summary(). est_digits number digits decimal displayed coefficient estimates, standard errors, bootstrap confidence intervals (present). Note values rounded number digits printing. digits position zero values, values may displayed fewer digits. Note coefficient table printed stats::printCoefmat(). numbers vary large, number digits decimal may smaller est_digits due limit column width. value also determines number digits displayed R-squared default_style FALSE. Default 4. t_digits number digits decimal displayed t statistic (column \"t value\"). value also determines number digits F statistic R-squared default_style FALSE. Default 4. pvalue_less_than p-value less value, displayed \"<(value)\". example, pvalue_less_than .001, default, p-values less .001 displayed <.001. value also determines printout p-value F statistic default_style FALSE. (argument eps.Pvalue stats::printCoefmat().) default_style Logical. FALSE, default, R-squared F statistic displayed readable style. TRUE, default style printout summary lm() output used.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.summary.std_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the Summary of a 'std_selected' Class Object — print.summary.std_selected","text":"x returned invisibly.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.summary.std_selected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print the Summary of a 'std_selected' Class Object — print.summary.std_selected","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/print.summary.std_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the Summary of a 'std_selected' Class Object — print.summary.std_selected","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat)  # Standardize all variables except for categorical variables. # Interaction terms are formed after standardization. lm_std <- std_selected(lm_raw, to_scale = ~ .,                                to_center = ~ .) summary(lm_std) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_raw, to_scale = ~., to_center = ~.) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod v1 cat1 #> - Variable(s) scaled: dv iv mod v1 cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> v1      10.13884    2.938932 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96117 -0.39474 -0.02285  0.37579  2.11040  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646     0.0483  1.3385  0.18136     #> iv            0.7374     0.0274 26.9480  < 0.001 *** #> mod           0.2599     0.0274  9.4962  < 0.001 *** #> v1           -0.0343     0.0273 -1.2542  0.21037     #> cat1gp2      -0.1450     0.0656 -2.2089  0.02764 *   #> cat1gp3      -0.0394     0.0688 -0.5734  0.56664     #> iv:mod        0.0321     0.0255  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6077 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. #>   # With bootstrapping # nboot = 100 just for illustration. nboot >= 2000 should be used in read # research. lm_std_boot <- std_selected_boot(lm_raw, to_scale = ~ .,                                          to_center = ~ .,                                          nboot = 100) summary(lm_std_boot) #>  #> Call to std_selected_boot(): #> std_selected_boot(lm_out = lm_raw, to_scale = ~., to_center = ~.,  #>     nboot = 100) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod v1 cat1 #> - Variable(s) scaled: dv iv mod v1 cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> v1      10.13884    2.938932 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #> - Nonparametric bootstrapping 95% confidence intervals computed. #> - The number of bootstrap samples is 100. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96117 -0.39474 -0.02285  0.37579  2.11040  #>  #> Coefficients: #>             Estimate CI Lower CI Upper Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646  -0.0155   0.1478     0.0483  1.3385  0.18136     #> iv            0.7374   0.6969   0.7777     0.0274 26.9480  < 0.001 *** #> mod           0.2599   0.2143   0.3117     0.0274  9.4962  < 0.001 *** #> v1           -0.0343  -0.0883   0.0217     0.0273 -1.2542  0.21037     #> cat1gp2      -0.1450  -0.2725  -0.0274     0.0656 -2.2089  0.02764 *   #> cat1gp3      -0.0394  -0.1774   0.0962     0.0688 -0.5734  0.56664     #> iv:mod        0.0321  -0.0178   0.0851     0.0255  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6077 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - [CI Lower, CI Upper] are bootstrap percentile confidence intervals. #> - Std. Error are not bootstrap SEs. #>"},{"path":"https://sfcheung.github.io/stdmod/reference/sleep_emo_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Predicting Sleep Duration — sleep_emo_con","title":"Sample Dataset: Predicting Sleep Duration — sleep_emo_con","text":"random subset real dataset. illustration.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/sleep_emo_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Predicting Sleep Duration — sleep_emo_con","text":"","code":"sleep_emo_con"},{"path":"https://sfcheung.github.io/stdmod/reference/sleep_emo_con.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Predicting Sleep Duration — sleep_emo_con","text":"data frame 500 rows six variables: case_id Case ID, integer sleep_duration Sleep duration hours conscientiousness Conscientiousness score, continuous emotional_stability Emotional stability score, continuous age Age years gender Gender, string, \"female\" \"male\"","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/std_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize Variables in a Regression Model — std_selected","title":"Standardize Variables in a Regression Model — std_selected","text":"Standardize, mean center, scale standard deviation selected variables regression model refit model","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/std_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize Variables in a Regression Model — std_selected","text":"","code":"std_selected(lm_out, to_scale = NULL, to_center = NULL, to_standardize = NULL)  std_selected_boot(   lm_out,   to_scale = NULL,   to_center = NULL,   to_standardize = NULL,   conf = 0.95,   nboot = 100,   boot_args = NULL,   save_boot_est = TRUE,   full_output = FALSE,   do_boot = TRUE )"},{"path":"https://sfcheung.github.io/stdmod/reference/std_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize Variables in a Regression Model — std_selected","text":"lm_out output lm(). to_scale terms rescaled standard deviation, specified formula lm(). example, terms scaled x1 x3, use ~ x1 + x3. need specify interaction term. scale outcome variable, list right hand side predictor. Specify original variables. NULL, terms rescaled standard deviations. Variables numeric ignored. Default NULL. to_center terms mean centered, specified formula lm(). example, terms centered x1 x3, use ~ x1 + x3. need specify interaction term. center  outcome variable, list right hand side predictor. Specify original variables. NULL, term centered. Default NULL. to_standardize terms standardized, specified formula lm(). example, terms standardized x1 x3, use ~ x1 + x3. need specify interaction term. standardize outcome variable, list right hand side predictor. Specify original variables. shortcut to_center to_scale. Listing variable to_standardize equivalent listing variable to_center to_scale. Default NULL. conf level confidence confidence interval. Default .95. nboot number bootstrap samples. Default 100. boot_args named list arguments passed boot::boot(). Default NULL. save_boot_est TRUE, default, bootstrap estimates saved element boot_est output. full_output Whether full output boot::boot() returned. Default FALSE. TRUE, full output boot::boot() saved element boot_out output. do_boot Whether bootstrapping confidence intervals formed. Default TRUE. FALSE, arguments related bootstrapping ignored.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/std_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize Variables in a Regression Model — std_selected","text":"updated lm() output, class std_selected added. treated usual lm() object functions. major additional element list: scaled_terms: NULL, character vector variables scaled. centered_terms: NULL, character vector variables mean-centered. scaled_by: numeric vector scaling factors variables model. value 1 terms scaled. centered_by: numeric vector numbers used centering variables model. value 0 terms centered. std_selected_call: original call. lm_out_call: call lm_out. Like std_selected(), std_selected_boot() returns updated lm() output, class std_selected added. output std_selected_boot() contain additional elements list: boot_ci: data frame bootstrap confidence intervals regression coefficient. nboot: number bootstrap samples requested. conf: level confidence, proportion. boot_est: matrix bootstrap estimates regression coefficients. number rows equal nboot, number columns equal number terms regression model. std_selected_boot_call: call std_selected_boot(). boot_out: available, original output boot::boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/std_selected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize Variables in a Regression Model — std_selected","text":"std_selected() originally developed compute standardized moderation effect standardized coefficients predictors given lm() output (Cheung, Cheung, Lau, Hui, & Vong, 2022). extended users can specify variables regression model mean-centered /rescaled standard deviations. model one interaction terms, formed transformation, yielding correct standardized solution moderated regression model. Moreover, categorical predictors automatically skipped mean-centering rescaling. Standardization conducted variable mean-centered rescaled standard deviation. Therefore, goal get standardized solution moderated regression, users just instruct function standardize non-categorical variables regression model. std_selected_boot() wrapper std_selected(). calls std_selected() bootstrap sample, computes nonparametric bootstrap percentile confidence intervals (Cheung, Cheung, Lau, Hui, & Vong, 2022). do_boot FALSE, object returns identical std_selected(). function intentionally argument setting seed random number. Users recommended set seed, e.g., using set.seed() calling , ensure reproducibility.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/std_selected.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Standardize Variables in a Regression Model — std_selected","text":"std_selected(): base function center scale selected variables regression model std_selected_boot(): wrapper std_selected() forms nonparametric bootstrap confidence intervals.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/std_selected.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardize Variables in a Regression Model — std_selected","text":"Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. doi:10.1037/hea0001188","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/std_selected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardize Variables in a Regression Model — std_selected","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/std_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize Variables in a Regression Model — std_selected","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500 head(dat) #>         dv       iv       mod        v1 cat1 #> 1 4946.751 12.76737  96.85621 11.756899  gp1 #> 2 6635.081 14.89097 106.25696 11.371237  gp2 #> 3 6060.708 15.24101  97.85852  9.377471  gp2 #> 4 7240.781 16.65782 104.80266 10.508913  gp1 #> 5 5775.759 11.84448  95.85912 15.093480  gp3 #> 6 7725.783 16.31270 100.20561  3.442902  gp2  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>   # Mean center mod only lm_cw <- std_selected(lm_raw, to_center = ~ mod) summary(lm_cw) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_raw, to_center = ~mod) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: mod #>  #>      centered_by scaled_by                Note #> dv         0.000         1                     #> iv         0.000         1                     #> mod      100.395         1 Centered (mean = 0) #> v1         0.000         1                     #> cat1          NA        NA Nonnumeric          #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  823.445    249.736  3.2973 0.001047 **  #> iv           395.692     14.684 26.9480  < 0.001 *** #> mod            5.126     40.772  0.1257 0.899992     #> v1           -12.760     10.174 -1.2542 0.210365     #> cat1gp2     -158.673     71.834 -2.2089 0.027642 *   #> cat1gp3      -43.166     75.283 -0.5734 0.566645     #> iv:mod         3.416      2.709  1.2608 0.207990     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. #>   # Mean center mod and iv lm_cwx <- std_selected(lm_raw, to_center = ~ mod + iv) summary(lm_cwx) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_raw, to_center = ~mod + iv) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: mod iv #>  #>      centered_by scaled_by                Note #> dv       0.00000         1                     #> iv      15.01576         1 Centered (mean = 0) #> mod    100.39502         1 Centered (mean = 0) #> v1       0.00000         1                     #> cat1          NA        NA Nonnumeric          #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 6765.069    115.857 58.3916  < 0.001 *** #> iv           395.692     14.684 26.9480  < 0.001 *** #> mod           56.418      5.941  9.4962  < 0.001 *** #> v1           -12.760     10.174 -1.2542  0.21037     #> cat1gp2     -158.673     71.834 -2.2089  0.02764 *   #> cat1gp3      -43.166     75.283 -0.5734  0.56664     #> iv:mod         3.416      2.709  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. #>   # Standardize both mod and iv lm_stdwx <- std_selected(lm_raw, to_scale = ~ mod + iv,                                to_center = ~ mod + iv) summary(lm_stdwx) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_raw, to_scale = ~mod + iv, to_center = ~mod +  #>     iv) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: mod iv #> - Variable(s) scaled: mod iv #>  #>      centered_by scaled_by                            Note #> dv       0.00000  1.000000                                 #> iv      15.01576  2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502  5.040823 Standardized (mean = 0, SD = 1) #> v1       0.00000  1.000000                                 #> cat1          NA        NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  6765.07     115.86 58.3916  < 0.001 *** #> iv            806.88      29.94 26.9480  < 0.001 *** #> mod           284.39      29.95  9.4962  < 0.001 *** #> v1            -12.76      10.17 -1.2542  0.21037     #> cat1gp2      -158.67      71.83 -2.2089  0.02764 *   #> cat1gp3       -43.17      75.28 -0.5734  0.56664     #> iv:mod         35.11      27.85  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. #>   # Standardize all variables except for categorical variables. # Interaction terms are formed after standardization. lm_std <- std_selected(lm_raw, to_scale = ~ .,                                to_center = ~ .) summary(lm_std) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_raw, to_scale = ~., to_center = ~.) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod v1 cat1 #> - Variable(s) scaled: dv iv mod v1 cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> v1      10.13884    2.938932 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96117 -0.39474 -0.02285  0.37579  2.11040  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646     0.0483  1.3385  0.18136     #> iv            0.7374     0.0274 26.9480  < 0.001 *** #> mod           0.2599     0.0274  9.4962  < 0.001 *** #> v1           -0.0343     0.0273 -1.2542  0.21037     #> cat1gp2      -0.1450     0.0656 -2.2089  0.02764 *   #> cat1gp3      -0.0394     0.0688 -0.5734  0.56664     #> iv:mod        0.0321     0.0255  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6077 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. #>   # Use to_standardize as a shortcut lm_stdwx2 <- std_selected(lm_raw, to_standardize = ~ mod + iv) # The results are the same coef(lm_stdwx) #> (Intercept)          iv         mod          v1     cat1gp2     cat1gp3  #>  6765.06947   806.87814   284.39275   -12.75999  -158.67255   -43.16606  #>      iv:mod  #>    35.11145  coef(lm_stdwx2) #> (Intercept)          iv         mod          v1     cat1gp2     cat1gp3  #>  6765.06947   806.87814   284.39275   -12.75999  -158.67255   -43.16606  #>      iv:mod  #>    35.11145  all.equal(coef(lm_stdwx), coef(lm_stdwx2)) #> [1] TRUE    dat <- test_x_1_w_1_v_1_cat1_n_500 head(dat) #>         dv       iv       mod        v1 cat1 #> 1 4946.751 12.76737  96.85621 11.756899  gp1 #> 2 6635.081 14.89097 106.25696 11.371237  gp2 #> 3 6060.708 15.24101  97.85852  9.377471  gp2 #> 4 7240.781 16.65782 104.80266 10.508913  gp1 #> 5 5775.759 11.84448  95.85912 15.093480  gp3 #> 6 7725.783 16.31270 100.20561  3.442902  gp2  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>  # Standardize all variables as in std_selected above, and compute the # nonparametric bootstrapping percentile confidence intervals. set.seed(87053) lm_std_boot <- std_selected_boot(lm_raw,                                  to_scale = ~ .,                                  to_center = ~ .,                                  conf = .95,                                  nboot = 100) # In real analysis, nboot should be at least 2000. summary(lm_std_boot) #>  #> Call to std_selected_boot(): #> std_selected_boot(lm_out = lm_raw, to_scale = ~., to_center = ~.,  #>     conf = 0.95, nboot = 100) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod v1 cat1 #> - Variable(s) scaled: dv iv mod v1 cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> v1      10.13884    2.938932 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #> - Nonparametric bootstrapping 95% confidence intervals computed. #> - The number of bootstrap samples is 100. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96117 -0.39474 -0.02285  0.37579  2.11040  #>  #> Coefficients: #>             Estimate CI Lower CI Upper Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646  -0.0301   0.1683     0.0483  1.3385  0.18136     #> iv            0.7374   0.7041   0.7948     0.0274 26.9480  < 0.001 *** #> mod           0.2599   0.2129   0.3130     0.0274  9.4962  < 0.001 *** #> v1           -0.0343  -0.0835   0.0392     0.0273 -1.2542  0.21037     #> cat1gp2      -0.1450  -0.3127  -0.0046     0.0656 -2.2089  0.02764 *   #> cat1gp3      -0.0394  -0.1845   0.1222     0.0688 -0.5734  0.56664     #> iv:mod        0.0321  -0.0103   0.0817     0.0255  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6077 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - [CI Lower, CI Upper] are bootstrap percentile confidence intervals. #> - Std. Error are not bootstrap SEs. #>   # Use to_standardize as a shortcut set.seed(87053) lm_std_boot2 <- std_selected_boot(lm_raw,                                   to_standardize = ~ .,                                   conf = .95,                                   nboot = 100) # The results are the same confint(lm_std_boot) #>                   2.5 %      97.5 % #> (Intercept) -0.03011698  0.16832106 #> iv           0.70408792  0.79477219 #> mod          0.21293423  0.31304112 #> v1          -0.08345938  0.03923478 #> cat1gp2     -0.31267483 -0.00464722 #> cat1gp3     -0.18447930  0.12223465 #> iv:mod      -0.01033317  0.08169839 confint(lm_std_boot2) #>                   2.5 %      97.5 % #> (Intercept) -0.03011698  0.16832106 #> iv           0.70408792  0.79477219 #> mod          0.21293423  0.31304112 #> v1          -0.08345938  0.03923478 #> cat1gp2     -0.31267483 -0.00464722 #> cat1gp3     -0.18447930  0.12223465 #> iv:mod      -0.01033317  0.08169839 all.equal(confint(lm_std_boot), confint(lm_std_boot2)) #> [1] TRUE"},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod-package.html","id":null,"dir":"Reference","previous_headings":"","what":"stdmod: Standardized Moderation Effect and Its Confidence Interval — stdmod-package","title":"stdmod: Standardized Moderation Effect and Its Confidence Interval — stdmod-package","text":"Functions computing standardized moderation effect moderated regression forming confidence interval nonparametric bootstrapping proposed Cheung, Cheung, Lau, Hui, Vong (2022) doi:10.1037/hea0001188 . Also includes simple--use functions computing conditional effects (unstandardized standardized) plotting moderation effects.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"stdmod: Standardized Moderation Effect and Its Confidence Interval — stdmod-package","text":"Maintainer: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) contributors: David Weng Ngai Vong [contributor]","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Moderation Effect Given an 'lm' Output — stdmod","title":"Standardized Moderation Effect Given an 'lm' Output — stdmod","text":"Compute standardized moderation effect moderated regression model.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Moderation Effect Given an 'lm' Output — stdmod","text":"","code":"stdmod(   lm_out,   x = NULL,   w = NULL,   y = NULL,   x_rescale = TRUE,   w_rescale = TRUE,   y_rescale = TRUE )  stdmod_boot(   lm_out,   ...,   nboot = 100,   conf = 0.95,   boot_args = NULL,   full_output = FALSE )"},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Moderation Effect Given an 'lm' Output — stdmod","text":"lm_out output lm(). x focal variable, , variable effect moderated. supplied, standard deviation used rescaling. Also called independent variable models. Default NULL. w moderator. supplied, standard deviation used rescaling. Default NULL. y outcome variable (dependent variable) . supplied, standard deviation used rescaling. Default NULL. x_rescale TRUE, rescale x standard deviation. Default TRUE. w_rescale TRUE, rescale w standard deviation. Default TRUE. y_rescale TRUE, rescale y standard deviation. Default TRUE. ... Parameters passed stdmod(). nboot number bootstrap samples. Default 100. conf level confidence confidence interval. Default .95. boot_args named list arguments passed boot::boot(). Default NULL. full_output Whether full output boot::boot() returned. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Moderation Effect Given an 'lm' Output — stdmod","text":"stdmod() returns scalar: standardized moderation effect. stdmod_boot() returns list two elements. element ci numeric vector bootstrap confidence interval. element boot_out, NA, output boot::boot(), used bootstrapping.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Moderation Effect Given an 'lm' Output — stdmod","text":"Two general functions, std_selected() std_selected_boot(), developed can functions . Users recommended use instead stdmod() stdmod_boot(). two functions updated near future. Nevertheless, computing standardized moderation effect forming nonparametric bootstrap interval required, functions can still used. stdmod() computes standardized moderation effect given lm() output using formula Cheung, Cheung, Lau, Hui, Vong (2022). Users specify moderator, focal variable (variable effect outcome variable moderated), outcome variable (dependent variable) , corresponding standardized moderation effect. Users can also select variable(s) standardized. stdmod_boot() wrapper stdmod(). computes nonparametric bootstrap confidence interval standardized moderation effect, suggested Cheung, Cheung, Lau, Hui, Vong (2022), given output lm() Percentile interval boot::boot.ci() returned function. types confidence intervals desired, set full_output = TRUE use boot::boot.ci() element boot_out output function.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Standardized Moderation Effect Given an 'lm' Output — stdmod","text":"stdmod(): base function computing standardized moderation effect stdmod_boot(): wrapper stdmod() computes nonparametric bootstrap confidence interval standardized moderation effect.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Moderation Effect Given an 'lm' Output — stdmod","text":"Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. doi:10.1037/hea0001188","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Moderation Effect Given an 'lm' Output — stdmod","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Moderation Effect Given an 'lm' Output — stdmod","text":"","code":"# Load a test data of 500 cases  dat <- test_x_1_w_1_v_2_n_500  # Do regression as usual: lm_raw <- lm(dv ~ iv*mod + v1 + v2, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + v2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1650.87  -513.21     6.61   460.18  2189.74  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept) 2814.565   4684.595   0.601   0.5482   #> iv          -164.942    304.407  -0.542   0.5882   #> mod          -17.223     46.420  -0.371   0.7108   #> v1           -12.157     10.684  -1.138   0.2557   #> v2            -4.284      6.290  -0.681   0.4962   #> iv:mod         5.515      3.038   1.815   0.0701 . #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 708.1 on 494 degrees of freedom #> Multiple R-squared:  0.5862,\tAdjusted R-squared:  0.582  #> F-statistic:   140 on 5 and 494 DF,  p-value: < 2.2e-16 #>   # The standard deviations of iv, dv, and mod: sds <- apply(dat, 2, sd) sds #>          dv          iv         mod          v1          v2  #> 1095.222413    1.991458    5.004342    2.970378    5.064710   # Compute the standardized moderation effect: stdmod_xyw <- stdmod(lm_raw, x = iv, y = dv, w = mod) stdmod_xyw #>     iv:mod  #> 0.05018003  # By default, all three variables will be standardized.  # Check against self-computed standardized moderation effect: coef(lm_raw)[\"iv:mod\"] * sds[\"iv\"] * sds[\"mod\"] / sds[\"dv\"] #>     iv:mod  #> 0.05018003   # Standardize only the iv, i.e., do not standardized dv and the moderator: stdmod_x <- stdmod(lm_raw, x = iv, y = dv, w = mod,                    x_rescale = TRUE,  y_rescale = FALSE, w_rescale = FALSE) stdmod_x #>   iv:mod  #> 10.98212  # Check against self-computed moderation effect with only iv standardized: coef(lm_raw)[\"iv:mod\"] * sds[\"iv\"] #>   iv:mod  #> 10.98212    dat <- test_x_1_w_1_v_2_n_500 # Do regression as usual: lm_raw <- lm(dv ~ iv*mod + v1 + v2, dat)  # Compute the standardized moderation effect. # Form its confidence interval by nonparametric bootstrapping. set.seed(85740917) stdmod_xyw_boot <- stdmod_boot(lm_raw, x = iv, w = mod, y = dv, nboot = 100) # In real analysis, nboot should be at least 2000.  # Print the ci stdmod_xyw_boot$ci #> [1] 0.01014322 0.10050906  # Repeat the analysis but keep the results from boot: set.seed(85740917) stdmod_xyw_boot <- stdmod_boot(lm_raw, x = iv, w = mod, y = dv,                                  nboot = 200, full_output = TRUE) # In real analysis, nboot should be at least 2000.  # Print the 95% percentile confidence interval stdmod_xyw_boot$ci #> [1] 0.005379417 0.103307077"},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"Compute standardized moderation effect structural equation model fitted lavaan::lavaan() wrappers form nonparametric bootstrap confidence interval.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"","code":"stdmod_lavaan(   fit,   x,   y,   w,   x_w,   standardized_x = TRUE,   standardized_y = TRUE,   standardized_w = TRUE,   boot_ci = FALSE,   boot_out = NULL,   R = 100,   conf = 0.95,   use_old_version = FALSE,   ... )"},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"fit SEM output lavaan::lavaan() wrappers. x name focal variable model, variable effect outcome variable moderated. y name outcome variable (dependent variable) model. w name moderator model. x_w name product term (x * w) model. can variable generated colon operator, e.g., \"x:w\", model original data set. standardized_x TRUE, default, x standardized computing standardized moderation effect. standardized_y TRUE, default, y standardized computing standardized moderation effect. standardized_w TRUE, default, w standardized computing standardized moderation effect. boot_ci Boolean. Whether nonparametric bootstrapping conducted. Default FALSE. boot_out set output manymome::do_boot(), stored bootstrap estimates retrieved form bootstrap confidence interval. set, bootstrap estimates stored fit, , used. Default NULL. R (used current version. Used use_old_version set TRUE.) number nonparametric bootstrapping samples. Default 100. Set least 2000 actual use. conf level confidence. Default .95, .e., 95%. use_old_version set TRUE, use bootstrapping method used 0.2.7.4 . Included reproducing previous results necessary. Default FALSE. ... (used current version. Used use_old_version set TRUE.) Optional arguments passed boot::boot(). Parallel processing can used adding appropriate arguments boot::boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"list class stdmod_lavaan elements: stdmod: standardized moderation effect. ci: nonparametric bootstrap confidence interval. NA confidence interval requested. boot_out: raw output boot::boot(). NA confidence interval requested. fit: original fit object.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":"important-notes","dir":"Reference","previous_headings":"","what":"Important Notes","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"Starting Version 0.2.7.5, stdmod_lavaan() adopts approach bootstrapping different previous versions (0.2.7.4 ), yielding bootstrapping results different previous versions (reasons explained later). reproduce results older version function, set use_old_version TRUE.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":"how-it-works","dir":"Reference","previous_headings":"","what":"How it works","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"stdmod_lavaan() accepts lavaan::lavaan object, structural equation model output returned lavaan::lavaan() wrappers (e.g, lavaan::sem()) computes standardized moderation effect using formula appendix Cheung, Cheung, Lau, Hui, Vong (2022). standard deviations focal variable (variable effect outcome variable moderated), moderator, outcome variable (dependent variable) computed implied covariance matrix returned lavaan::lavInspect(). Therefore, models fitted data sets missing data (e.g., missing = \"fiml\") also supported. Partial standardization can also requested. example, standardization can requested focal variable outcome variable. two ways request nonparametric bootstrap confidence interval. First, model fitted se = \"boot\" se = \"bootstrap\" lavaan. stored bootstrap estimates retrieved automatically compute standardized moderation effect. efficient approach bootstrap confidence intervals also needed parameters model. Bootstrapping needs done . Second, bootstrap estimates can generated manymome::do_boot(). output supplied argument boot_out. Bootstrapping also needs done . approach appropriate bootstrapping confidence intervals needed model parameters, another type confidence interval needed fitting model. Please refer help page manymome::do_boot() use function. approaches, standard deviations also computed bootstrap samples. ensures sampling variability standard deviations also taken account computing bootstrap confidence interval standardized moderation effect.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":"note-on-the-differences-between-the-current-version-version-or-later-and-previous-versions-and-before-","dir":"Reference","previous_headings":"","what":"Note on the differences between the current version (Version 0.2.7.5 or later) and previous versions (0.2.7.4 and before)","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"older versions, stdmod_lavaan() allow partial standardization. Moreover, uses boot::boot() bootstrapping. Even seed, results boot::boot() identical lavaan se = \"boot\" differ way indices resampling generated. approaches correct, just use generated random numbers differently. results consistent lavaan, current version stdmod_lavaan() adopts resampling algorithm identical lavaan. Last, older versions, stdmod_lavaan() bootstrapping every time called. inefficient. bootstrapping results current version identical older versions due use different resampling algorithms, reproduce previous results, set use_old_version TRUE","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. doi:10.1037/hea0001188","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/stdmod_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Moderation Effect and Its Bootstrap CI in 'lavaan' — stdmod_lavaan","text":"","code":"#Load a test data of 500 cases  dat <- test_mod1 library(lavaan) mod <- \" med ~ iv + mod + iv:mod + cov1 dv ~ med + cov2 \"  fit <- sem(mod, dat)  # Compute the standardized moderation effect out_noboot <- stdmod_lavaan(fit = fit,                             x = \"iv\",                             y = \"med\",                             w = \"mod\",                             x_w = \"iv:mod\") out_noboot #>  #> Call: #> stdmod_lavaan(fit = fit, x = \"iv\", y = \"med\", w = \"mod\", x_w = \"iv:mod\") #>  #>                  Variable #> Focal Variable         iv #> Moderator             mod #> Outcome Variable      med #> Product Term       iv:mod #>  #>              lhs op    rhs   est    se      z pvalue ci.lower ci.upper #> Original     med  ~ iv:mod 0.257 0.025 10.169      0    0.208    0.307 #> Standardized med  ~ iv:mod 0.440    NA     NA     NA       NA       NA  # Compute the standardized moderation effect and # its percentile confidence interval using # nonparametric bootstrapping # Fit the model with bootstrap confidence intervals # At least 2000 bootstrap samples should be used # in real research. 50 is used here only for # illustration. fit <- sem(mod, dat, se = \"boot\", bootstrap = 50,            iseed = 89574) out_boot <- stdmod_lavaan(fit = fit,                           x = \"iv\",                           y = \"med\",                           w = \"mod\",                           x_w = \"iv:mod\",                           boot_ci = TRUE) out_boot #>  #> Call: #> stdmod_lavaan(fit = fit, x = \"iv\", y = \"med\", w = \"mod\", x_w = \"iv:mod\",  #>     boot_ci = TRUE) #>  #>                  Variable #> Focal Variable         iv #> Moderator             mod #> Outcome Variable      med #> Product Term       iv:mod #>  #>              lhs op    rhs   est    se     z pvalue ci.lower ci.upper #> Original     med  ~ iv:mod 0.257 0.033 7.725      0    0.173    0.297 #> Standardized med  ~ iv:mod 0.440    NA    NA     NA    0.316    0.520 #>  #> Confidence interval of standardized moderation effect: #> - Level of confidence: 95% #> - Bootstrapping Method: Nonparametric #> - Type: Percentile #> - Number of bootstrap samples requests:  #> - Number of bootstrap samples with valid results: 50 #>  #> NOTE: Bootstrapping conducted by the method in 0.2.7.5 or later. To use #> the method in the older versions for reproducing previous results, set #> 'use_old_version' to 'TRUE'."},{"path":"https://sfcheung.github.io/stdmod/reference/summary.std_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for a 'std_selected' Class Object — summary.std_selected","title":"Summary Method for a 'std_selected' Class Object — summary.std_selected","text":"Summarize results std_selected() std_selected_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/summary.std_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for a 'std_selected' Class Object — summary.std_selected","text":"","code":"# S3 method for std_selected summary(object, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/summary.std_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for a 'std_selected' Class Object — summary.std_selected","text":"object output std_selected() std_selected_boot(). ... Additional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/summary.std_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for a 'std_selected' Class Object — summary.std_selected","text":"object class summary.std_selected, bootstrap confidence intervals added present object. object list. main element coefficients similar coefficient table summary() printout lm(). object printing summary information results std_selected() std_selected_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/summary.std_selected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for a 'std_selected' Class Object — summary.std_selected","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/summary.std_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for a 'std_selected' Class Object — summary.std_selected","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>   # Standardize all variables except for categorical variables. # Interaction terms are formed after standardization. lm_std <- std_selected(lm_raw, to_scale = ~ .,                                to_center = ~ .) summary(lm_std) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_raw, to_scale = ~., to_center = ~.) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod v1 cat1 #> - Variable(s) scaled: dv iv mod v1 cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> v1      10.13884    2.938932 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96117 -0.39474 -0.02285  0.37579  2.11040  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646     0.0483  1.3385  0.18136     #> iv            0.7374     0.0274 26.9480  < 0.001 *** #> mod           0.2599     0.0274  9.4962  < 0.001 *** #> v1           -0.0343     0.0273 -1.2542  0.21037     #> cat1gp2      -0.1450     0.0656 -2.2089  0.02764 *   #> cat1gp3      -0.0394     0.0688 -0.5734  0.56664     #> iv:mod        0.0321     0.0255  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6077 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. #>   # With bootstrapping # nboot = 100 just for illustration. nboot >= 2000 should be used in read # research. lm_std_boot <- std_selected_boot(lm_raw, to_scale = ~ .,                                          to_center = ~ .,                                          nboot = 100) summary(lm_std_boot) #>  #> Call to std_selected_boot(): #> std_selected_boot(lm_out = lm_raw, to_scale = ~., to_center = ~.,  #>     nboot = 100) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod v1 cat1 #> - Variable(s) scaled: dv iv mod v1 cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> v1      10.13884    2.938932 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #> - Nonparametric bootstrapping 95% confidence intervals computed. #> - The number of bootstrap samples is 100. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96117 -0.39474 -0.02285  0.37579  2.11040  #>  #> Coefficients: #>             Estimate CI Lower CI Upper Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646  -0.0127   0.1449     0.0483  1.3385  0.18136     #> iv            0.7374   0.7008   0.7757     0.0274 26.9480  < 0.001 *** #> mod           0.2599   0.1996   0.3148     0.0274  9.4962  < 0.001 *** #> v1           -0.0343  -0.0960   0.0372     0.0273 -1.2542  0.21037     #> cat1gp2      -0.1450  -0.3026  -0.0365     0.0656 -2.2089  0.02764 *   #> cat1gp3      -0.0394  -0.1389   0.0882     0.0688 -0.5734  0.56664     #> iv:mod        0.0321  -0.0124   0.0633     0.0255  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6077 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - [CI Lower, CI Upper] are bootstrap percentile confidence intervals. #> - Std. Error are not bootstrap SEs. #>"},{"path":"https://sfcheung.github.io/stdmod/reference/test_mod1.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A Path Model With A Moderator — test_mod1","title":"Sample Dataset: A Path Model With A Moderator — test_mod1","text":"testing. Generated following model.","code":"mod <- \" med ~ iv + mod + iv:mod + cov1 dv ~ med + cov2 \""},{"path":"https://sfcheung.github.io/stdmod/reference/test_mod1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A Path Model With A Moderator — test_mod1","text":"","code":"test_mod1"},{"path":"https://sfcheung.github.io/stdmod/reference/test_mod1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A Path Model With A Moderator — test_mod1","text":"data frame 300 rows 6 variables: dv Dependent variable, continuous iv Independent variable, continuous med Mediator, continuous mod Moderator, continuous cov1 Covariate, continuous cov2 Covariate, continuous","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_mod2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A Path Model With A Moderator — test_mod2","title":"Sample Dataset: A Path Model With A Moderator — test_mod2","text":"testing. Generated following model.","code":"mod <- \" med ~ iv + cov1 dv ~ med + mod + med:mod + cov2 \""},{"path":"https://sfcheung.github.io/stdmod/reference/test_mod2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A Path Model With A Moderator — test_mod2","text":"","code":"test_mod2"},{"path":"https://sfcheung.github.io/stdmod/reference/test_mod2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A Path Model With A Moderator — test_mod2","text":"data frame 300 rows 6 variables: dv Dependent variable, continuous iv Independent variable, continuous med Mediator, continuous mod Moderator, continuous cov1 Covariate, continuous cov2 Covariate, continuous","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_mod3_miss.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A Path Model With A Moderator — test_mod3_miss","title":"Sample Dataset: A Path Model With A Moderator — test_mod3_miss","text":"testing handling warnings stdmod_lavaan(). Generated following model. dv 88% missing. warning missing data raised bootstrap samples.","code":"mod <- \" med ~ iv + mod + iv:mod + cov1 dv ~ med + cov2 \""},{"path":"https://sfcheung.github.io/stdmod/reference/test_mod3_miss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A Path Model With A Moderator — test_mod3_miss","text":"","code":"test_mod3_miss"},{"path":"https://sfcheung.github.io/stdmod/reference/test_mod3_miss.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A Path Model With A Moderator — test_mod3_miss","text":"data frame 500 rows 6 variables: dv Dependent variable, continuous iv Independent variable, continuous med Mediator, continuous mod Moderator, continuous cov1 Covariate, continuous cov2 Covariate, continuous","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_1_cat1_n_500.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_n_500","title":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_n_500","text":"covariate (cat1) categorical. testing.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_1_cat1_n_500.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_n_500","text":"","code":"test_x_1_w_1_v_1_cat1_n_500"},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_1_cat1_n_500.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_n_500","text":"data frame 500 rows five variables: dv Dependent variable, continuous iv Independent variable, continuous mod Moderator variable, continuous v1 Covariate, continuous cat1 Covariate, categorical (string) three values: \"gp1\", \"gp2\", \"gp3\"","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_1_cat1_xw_cov_n_500.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_xw_cov_n_500","title":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_xw_cov_n_500","text":"independent variable moderator associated. demonstrating use tumble graph.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_1_cat1_xw_cov_n_500.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_xw_cov_n_500","text":"","code":"test_x_1_w_1_v_1_cat1_xw_cov_n_500"},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_1_cat1_xw_cov_n_500.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_xw_cov_n_500","text":"data frame 500 rows 5 variables: dv Dependent variable, continuous iv Independent variable, continuous mod Moderator variable, continuous v1 Covariate, continuous cat1 Covariate, categorical (string) three values, \"gp1\", \"gp2\", \"gp3\"","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_1_cat1_xw_cov_wcat3_n_500.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: One IV, One 3-Category Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_xw_cov_wcat3_n_500","title":"Sample Dataset: One IV, One 3-Category Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_xw_cov_wcat3_n_500","text":"independent variable categorical moderator associated. demonstrating use tumble graph.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_1_cat1_xw_cov_wcat3_n_500.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: One IV, One 3-Category Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_xw_cov_wcat3_n_500","text":"","code":"test_x_1_w_1_v_1_cat1_xw_cov_wcat3_n_500"},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_1_cat1_xw_cov_wcat3_n_500.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: One IV, One 3-Category Moderator, Two Covariates — test_x_1_w_1_v_1_cat1_xw_cov_wcat3_n_500","text":"data frame 500 rows 5 variables: dv Dependent variable, continuous iv Independent variable, continuous mod Moderator variable, categorical (string) three categories, \"City Alpha\", \"City Gamma\", \"City Beta\" v1 Covariate, continuous cat1 Covariate, categorical (string) three values, \"gp1\", \"gp2\", \"gp3\"","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_2_n_500.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_2_n_500","title":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_2_n_500","text":"variables continuous. testing.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_2_n_500.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_2_n_500","text":"","code":"test_x_1_w_1_v_2_n_500"},{"path":"https://sfcheung.github.io/stdmod/reference/test_x_1_w_1_v_2_n_500.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: One IV, One Moderator, Two Covariates — test_x_1_w_1_v_2_n_500","text":"data frame 500 rows five variables: dv Dependent variable, continuous iv Independent variable, continuous mod Moderator variable, continuous v1 Covariate, continuous v2 Covariate, continuous","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/update.std_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'update' Method for a 'std_selected' Class Object — update.std_selected","title":"The 'update' Method for a 'std_selected' Class Object — update.std_selected","text":"used update call lm(), call std_selected() std_selected_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/update.std_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The 'update' Method for a 'std_selected' Class Object — update.std_selected","text":"","code":"# S3 method for std_selected update(object, formula., ..., evaluate = TRUE)"},{"path":"https://sfcheung.github.io/stdmod/reference/update.std_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The 'update' Method for a 'std_selected' Class Object — update.std_selected","text":"object output class std_selected(). formula. Changes formula. ... Optional arguments changed. evaluate Whether call evaluated.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/update.std_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The 'update' Method for a 'std_selected' Class Object — update.std_selected","text":"evaluate = TRUE, returns updated fitted object, otherwise, updated call.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/update.std_selected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The 'update' Method for a 'std_selected' Class Object — update.std_selected","text":"Although supported, recommended update analysis processed std_selected() std_selected_boot(). recommended call lm() pass output std_selected() std_selected_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/update.std_selected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'update' Method for a 'std_selected' Class Object — update.std_selected","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/update.std_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The 'update' Method for a 'std_selected' Class Object — update.std_selected","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500 head(dat) #>         dv       iv       mod        v1 cat1 #> 1 4946.751 12.76737  96.85621 11.756899  gp1 #> 2 6635.081 14.89097 106.25696 11.371237  gp2 #> 3 6060.708 15.24101  97.85852  9.377471  gp2 #> 4 7240.781 16.65782 104.80266 10.508913  gp1 #> 5 5775.759 11.84448  95.85912 15.093480  gp3 #> 6 7725.783 16.31270 100.20561  3.442902  gp2  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat) summary(lm_raw) #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2146.0  -431.9   -25.0   411.2  2309.3  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  308.767   4075.066   0.076   0.9396   #> iv            52.760    271.242   0.195   0.8459   #> mod            5.127     40.772   0.126   0.9000   #> v1           -12.760     10.174  -1.254   0.2104   #> cat1gp2     -158.673     71.834  -2.209   0.0276 * #> cat1gp3      -43.166     75.283  -0.573   0.5666   #> iv:mod         3.416      2.709   1.261   0.2080   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 665 on 493 degrees of freedom #> Multiple R-squared:  0.6352,\tAdjusted R-squared:  0.6307  #> F-statistic:   143 on 6 and 493 DF,  p-value: < 2.2e-16 #>   # Standardize all variables except for categorical variables. # Interaction terms are formed after standardization. lm_std <- std_selected(lm_raw, to_scale = ~ .,                                to_center = ~ .) summary(lm_std) #>  #> Call to std_selected(): #> std_selected(lm_out = lm_raw, to_scale = ~., to_center = ~.) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod v1 cat1 #> - Variable(s) scaled: dv iv mod v1 cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> v1      10.13884    2.938932 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = dv ~ iv * mod + v1 + cat1, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96117 -0.39474 -0.02285  0.37579  2.11040  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646     0.0483  1.3385  0.18136     #> iv            0.7374     0.0274 26.9480  < 0.001 *** #> mod           0.2599     0.0274  9.4962  < 0.001 *** #> v1           -0.0343     0.0273 -1.2542  0.21037     #> cat1gp2      -0.1450     0.0656 -2.2089  0.02764 *   #> cat1gp3      -0.0394     0.0688 -0.5734  0.56664     #> iv:mod        0.0321     0.0255  1.2608  0.20799     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6077 on 493 degrees of freedom #>  #> R-squared                : 0.6352 #> Adjusted R-squared       : 0.6307 #> ANOVA test of R-squared  : F(6, 493) = 143.047, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0012 #> F test of R-squared increase       : F(1, 493) = 1.5895, p = 0.208 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. #>   # Update the model lm_std2 <- update(lm_std, . ~ . - v1) summary(lm_std2) #>  #> Call to std_selected(): #> std_selected(lm_out = lm(formula = dv ~ iv + mod + cat1 + iv:mod,  #>     data = dat), to_scale = ~., to_center = ~.) #>  #> Selected variable(s) are centered by mean and/or scaled by SD #> - Variable(s) centered: dv iv mod cat1 #> - Variable(s) scaled: dv iv mod cat1 #>  #>      centered_by   scaled_by                            Note #> dv    6565.02965 1094.244465 Standardized (mean = 0, SD = 1) #> iv      15.01576    2.039154 Standardized (mean = 0, SD = 1) #> mod    100.39502    5.040823 Standardized (mean = 0, SD = 1) #> cat1          NA          NA Nonnumeric                      #>  #> Note: #> - Categorical variables will not be centered or scaled even if #>   requested. #>  #> Call: #> lm(formula = dv ~ iv + mod + cat1 + iv:mod, data = dat_mod) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.96126 -0.40630 -0.02305  0.36505  2.15456  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.0646     0.0483  1.3383  0.18143     #> iv            0.7373     0.0274 26.9299  < 0.001 *** #> mod           0.2619     0.0273  9.5792  < 0.001 *** #> cat1gp2      -0.1434     0.0657 -2.1833  0.02948 *   #> cat1gp3      -0.0419     0.0688 -0.6083  0.54327     #> iv:mod        0.0340     0.0254  1.3383  0.18141     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.608 on 494 degrees of freedom #>  #> R-squared                : 0.6340 #> Adjusted R-squared       : 0.6303 #> ANOVA test of R-squared  : F(5, 494) = 171.1432, p < 0.001 #>  #> = Test the highest order term = #> The highest order term             : iv:mod #> R-squared increase adding this term: 0.0013 #> F test of R-squared increase       : F(1, 494) = 1.7911, p = 0.181 #>  #> Note: #> - Estimates and their statistics are based on the data after #>   mean-centering, scaling, or standardization. #> - One or more variables are scaled by SD or standardized. OLS standard #>   errors and confidence intervals may be biased for their coefficients. #>   Please use `std_selected_boot()`. #>"},{"path":"https://sfcheung.github.io/stdmod/reference/vcov.std_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'vcov' Method for a 'std_selected' Class Object — vcov.std_selected","title":"The 'vcov' Method for a 'std_selected' Class Object — vcov.std_selected","text":"Compute variance-covariance matrix estimates output std_selected() std_selected_boot().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/vcov.std_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The 'vcov' Method for a 'std_selected' Class Object — vcov.std_selected","text":"","code":"# S3 method for std_selected vcov(object, type, ...)"},{"path":"https://sfcheung.github.io/stdmod/reference/vcov.std_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The 'vcov' Method for a 'std_selected' Class Object — vcov.std_selected","text":"object output std_selected() std_selected_boot(). type type variance-covariance matrix. set \"lm\", returns results stats::vcov() method output lm(). set \"boot\", variance-covariance matrix bootstrap estimates returned. Default depends object. bootstrap estimates stored, default \"boot\". Otherwise, default \"lm\". ... Arguments passed stats::vcov().","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/vcov.std_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The 'vcov' Method for a 'std_selected' Class Object — vcov.std_selected","text":"matrix variances covariances parameter estimates.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/vcov.std_selected.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The 'vcov' Method for a 'std_selected' Class Object — vcov.std_selected","text":"bootstrapping used form confidence intervals, users can request variance-covariance matrix bootstrap estimates.","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/vcov.std_selected.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'vcov' Method for a 'std_selected' Class Object — vcov.std_selected","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/stdmod/reference/vcov.std_selected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The 'vcov' Method for a 'std_selected' Class Object — vcov.std_selected","text":"","code":"# Load a sample data set  dat <- test_x_1_w_1_v_1_cat1_n_500 head(dat) #>         dv       iv       mod        v1 cat1 #> 1 4946.751 12.76737  96.85621 11.756899  gp1 #> 2 6635.081 14.89097 106.25696 11.371237  gp2 #> 3 6060.708 15.24101  97.85852  9.377471  gp2 #> 4 7240.781 16.65782 104.80266 10.508913  gp1 #> 5 5775.759 11.84448  95.85912 15.093480  gp3 #> 6 7725.783 16.31270 100.20561  3.442902  gp2  # Do a moderated regression by lm lm_raw <- lm(dv ~ iv*mod + v1 + cat1, dat)  # Standardize all variables except for categorical variables. # Interaction terms are formed after standardization. lm_std <- std_selected(lm_raw, to_scale = ~ .,                                to_center = ~ .)  # VCOV of lm output vcov(lm_std) #>               (Intercept)            iv           mod            v1 #> (Intercept)  2.328093e-03 -2.424492e-05 -4.453643e-05  5.904665e-07 #> iv          -2.424492e-05  7.487428e-04 -3.910411e-05 -1.570052e-06 #> mod         -4.453643e-05 -3.910411e-05  7.490437e-04  4.323374e-05 #> v1           5.904665e-07 -1.570052e-06  4.323374e-05  7.466559e-04 #> cat1gp2     -2.327318e-03 -5.104838e-06  9.054077e-05  3.534309e-05 #> cat1gp3     -2.327547e-03  7.491390e-05  2.729951e-05 -5.249772e-05 #> iv:mod      -3.979516e-05  5.489704e-05  4.037895e-05  4.206434e-05 #>                   cat1gp2       cat1gp3        iv:mod #> (Intercept) -2.327318e-03 -2.327547e-03 -3.979516e-05 #> iv          -5.104838e-06  7.491390e-05  5.489704e-05 #> mod          9.054077e-05  2.729951e-05  4.037895e-05 #> v1           3.534309e-05 -5.249772e-05  4.206434e-05 #> cat1gp2      4.309522e-03  2.323477e-03 -1.319904e-06 #> cat1gp3      2.323477e-03  4.733274e-03  1.279117e-05 #> iv:mod      -1.319904e-06  1.279117e-05  6.477400e-04  # Standardize all variables as in std_selected above, and compute the # nonparametric bootstrapping percentile confidence intervals. lm_std_boot <- std_selected_boot(lm_raw,                                  to_scale = ~ .,                                  to_center = ~ .,                                  conf = .95,                                  nboot = 100) # In real analysis, nboot should be at least 2000.  # VCOV of bootstrap estimates, default when bootstrap was conducted vcov(lm_std_boot) #>               (Intercept)            iv           mod            v1 #> (Intercept)  1.428285e-03 -1.712150e-05  7.503641e-05  2.042482e-04 #> iv          -1.712150e-05  4.442566e-04 -3.248787e-04 -4.588781e-05 #> mod          7.503641e-05 -3.248787e-04  7.924142e-04  8.099015e-05 #> v1           2.042482e-04 -4.588781e-05  8.099015e-05  9.004586e-04 #> cat1gp2     -2.121657e-03 -2.175352e-06  5.257831e-05 -2.719232e-04 #> cat1gp3     -1.922741e-03  7.050081e-05 -2.509538e-04 -2.982106e-04 #> iv:mod      -2.017472e-04  1.338373e-04 -1.416426e-04 -7.092508e-05 #>                   cat1gp2       cat1gp3        iv:mod #> (Intercept) -2.121657e-03 -1.922741e-03 -2.017472e-04 #> iv          -2.175352e-06  7.050081e-05  1.338373e-04 #> mod          5.257831e-05 -2.509538e-04 -1.416426e-04 #> v1          -2.719232e-04 -2.982106e-04 -7.092508e-05 #> cat1gp2      3.954751e-03  2.014940e-03  2.320263e-04 #> cat1gp3      2.014940e-03  3.644739e-03  2.032413e-04 #> iv:mod       2.320263e-04  2.032413e-04  5.108183e-04  # For OLS VCOV vcov(lm_std_boot, type = \"lm\") #>               (Intercept)            iv           mod            v1 #> (Intercept)  2.328093e-03 -2.424492e-05 -4.453643e-05  5.904665e-07 #> iv          -2.424492e-05  7.487428e-04 -3.910411e-05 -1.570052e-06 #> mod         -4.453643e-05 -3.910411e-05  7.490437e-04  4.323374e-05 #> v1           5.904665e-07 -1.570052e-06  4.323374e-05  7.466559e-04 #> cat1gp2     -2.327318e-03 -5.104838e-06  9.054077e-05  3.534309e-05 #> cat1gp3     -2.327547e-03  7.491390e-05  2.729951e-05 -5.249772e-05 #> iv:mod      -3.979516e-05  5.489704e-05  4.037895e-05  4.206434e-05 #>                   cat1gp2       cat1gp3        iv:mod #> (Intercept) -2.327318e-03 -2.327547e-03 -3.979516e-05 #> iv          -5.104838e-06  7.491390e-05  5.489704e-05 #> mod          9.054077e-05  2.729951e-05  4.037895e-05 #> v1           3.534309e-05 -5.249772e-05  4.206434e-05 #> cat1gp2      4.309522e-03  2.323477e-03 -1.319904e-06 #> cat1gp3      2.323477e-03  4.733274e-03  1.279117e-05 #> iv:mod      -1.319904e-06  1.279117e-05  6.477400e-04"},{"path":[]},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"bug-fixes-0-2-10-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"stdmod 0.2.10.1","text":"plotmod(), labels regarding SDs longer displayed w_values set. (0.2.10.1)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-0210","dir":"Changelog","previous_headings":"","what":"stdmod 0.2.10","title":"stdmod 0.2.10","text":"CRAN release: 2024-02-22","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"new-features-0-2-10","dir":"Changelog","previous_headings":"","what":"New Features","title":"stdmod 0.2.10","text":"Improved printout summary() std_selected() std_selected_boot() outputs. now prints R-squared increase highest order term, well F test increase, model one one highest order term (e.g., interaction term). (0.2.9.1) Added argument w_values cond_effect() plolmod(). Users can specify values moderator (w) used compute conditional effects. (0.2.9.2)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"miscellaneous-0-2-10","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"stdmod 0.2.10","text":"Revised update.std_selected(). Though still recommended, now work reliably needs called. (0.2.9.1)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-029","dir":"Changelog","previous_headings":"","what":"stdmod 0.2.9","title":"stdmod 0.2.9","text":"CRAN release: 2023-09-11 Fixed issue stdmod-package. (0.2.8.9001) Improved printout summary() std_selected() std_selected_boot() outputs. Small numbers rounded prevent use scientific notation, small p-values can printed formats like p<.001. Users can also control number digits printout. See help page print.summary.std_selected() learn new arguments (0.2.8.9002). Finalized 0.2.9. (0.2.9)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-028","dir":"Changelog","previous_headings":"","what":"stdmod 0.2.8","title":"stdmod 0.2.8","text":"CRAN release: 2023-06-24 Added R CMD check noSuggests. (0.2.7.1) Removed dplyr tests Suggests. (0.2.7.2) tests using visreg skipped visreg installed. (0.2.7.3) Add note printout cond_effect-class object summary std_selected-class object. one variables standardized bootstrapping requested, users recommended use std_selected_boot(). (0.2.7.4) stdmod_lavaan() switched bootstrapping algorithm used lavaan(). also updated allow partial standardization. use older algorithm, set use_old_version() TRUE. (0.2.7.5) Finalized 0.2.8. (0.2.8)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-027","dir":"Changelog","previous_headings":"","what":"stdmod 0.2.7","title":"stdmod 0.2.7","text":"CRAN release: 2023-03-26 Updated pkgdown site bootstrap 5. (0.2.6.1) Fixed missing whitepace note print() method summary() output std_selected(). (0.2.6.2) Added to_standardize std_selected() std_selected_boot(). (0.2.6.3) Fixed bug confint.std_selected() type = \"lm\" bootstrapping requested. issue t-based CIs used bootstrapping requested. option just testing. (0.2.6.4) Updated examples use to_standardize mention shortcut. (0.2.6.5) Updated vignettes introduce to_standardize. (0.2.6.6) Fixed link vignette. (0.2.6.7) Finalized 0.2.7. (0.2.7)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-026","dir":"Changelog","previous_headings":"","what":"stdmod 0.2.6","title":"stdmod 0.2.6","text":"CRAN release: 2023-03-10 Improved printout summary() std_selected() std_selected_boot() outputs. (0.2.4.9001). Fixed deprecated functions arguments ggplot2. (0.2.4.9002) Fixed problem wrapping long lines printout summary() std_selected(). (0.2.4.9003) Update GitHub actions. Fixed missing link Rd file old macOS machines. (0.2.6) Use bibentry() CITATION. (0.2.6)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-024","dir":"Changelog","previous_headings":"","what":"stdmod 0.2.4","title":"stdmod 0.2.4","text":"Fixed bug std_selected(): now works correctly variable data frame factor. (0.2.0.1) Added confint() coef() methods cond_effect-class objects. confint() can return confidence intervals based t statistics, appropriate situations. (0.2.2) print() method cond_effect-class objects can print confidence intervals based t statistics. (0.2.2) Added do_boot std_selected_boot(). set FALSE, bootstrapping. (0.2.3) cond_effect_boot() disable bootstrapping original call output generated std_selected_boot(), avoid redundant bootstrapping inside bootstrapping. (0.2.3) Added do_boot cond_effect_boot(). set FALSE, bootstrapping. (0.2.4)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-0200","dir":"Changelog","previous_headings":"","what":"stdmod 0.2.0.0","title":"stdmod 0.2.0.0","text":"CRAN release: 2022-09-21 Changed default confint() vcov() std_selected-class object. bootstrap CIs requested, bootstrap CIs VCOV based bootstrapping returned. (0.2.0.0)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-0177","dir":"Changelog","previous_headings":"","what":"stdmod 0.1.7.7","title":"stdmod 0.1.7.7","text":"Updated references. (0.1.7.5) Minor changes due Roxygen updates. (0.1.7.5) Added R CMD Check action (0.1.7.6) Minor changes due Roxygen updates. (0.1.7.7) Fixed typo CITATION","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-0174","dir":"Changelog","previous_headings":"","what":"stdmod 0.1.7.4","title":"stdmod 0.1.7.4","text":"CRAN release: 2022-08-07 (major changes 0.1.7.1) Fixed bug plotmod(). now correctly handles two levels w_method set \"percentile\". (0.1.7.2, 0.1.7.3) Fixed typo DESCRIPTION. (0.1.7.4)","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-0171","dir":"Changelog","previous_headings":"","what":"stdmod 0.1.7.1","title":"stdmod 0.1.7.1","text":"CRAN release: 2022-05-11 (major changes 0.1.5) Added plotmod() plotting moderation effects. function check whether variable standardized. yes, note plot. plotmod() can also plot Tumble graph (Bodner, 2016) graph_type set \"tumble\". Updated vignettes use plotmod() instead visreg::visreg(). Added cond_effect() computing conditional effects. function check variable(s) /standardized. yes, note printout. Added cond_effect_boot(), wrapper cond_effect() can form nonparametric bootstrap confidence intervals conditional effects, may partially completely standardized. Updated print method summary std_selected() std_selected_boot(). Added vignettes introduce new functions. stdmod_lavaan() now returns object class stdmod_lavaan, methods print, confint, coef added.","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-015","dir":"Changelog","previous_headings":"","what":"stdmod 0.1.5","title":"stdmod 0.1.5","text":"Changed column order coefficient table std_selected_boot() output. Bootstrap confidence intervals placed next parameter estimates. Added vcov() method std_selected() output. bootstrapping used, can return variance-covariance matrix bootstrap estimates. Added confint() method std_selected() output. bootstrapping used, can return bootstrap percentile confidence intervals requested. minor fixes.","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-013","dir":"Changelog","previous_headings":"","what":"stdmod 0.1.3","title":"stdmod 0.1.3","text":"Set gh-pages fix dependency vignette.","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-012","dir":"Changelog","previous_headings":"","what":"stdmod 0.1.2","title":"stdmod 0.1.2","text":"Updated methods std_selected().","code":""},{"path":"https://sfcheung.github.io/stdmod/news/index.html","id":"stdmod-011","dir":"Changelog","previous_headings":"","what":"stdmod 0.1.1","title":"stdmod 0.1.1","text":"first version.","code":""}]
